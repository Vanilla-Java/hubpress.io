<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Vanilla Java]]></title><description><![CDATA[Vanilla Java]]></description><link>https://vanilla-java.github.io</link><image><url>https://raw.githubusercontent.com/Vanilla-Java/vanilla-java.github.io/master/images/French-Vanilla-Java.jpg</url><title>Vanilla Java</title><link>https://vanilla-java.github.io</link></image><generator>RSS for Node</generator><lastBuildDate>Sun, 25 Mar 2018 19:15:27 GMT</lastBuildDate><atom:link href="https://vanilla-java.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Microservices in the Chronicle world - Part 1]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>At a high level, different <strong>Microservice</strong> strategies have a lot in common.  They subscribe to the same ideals.
When it comes to the details of how they are actually implemented, they can vary.</p>
</div>
<div class="paragraph">
<p>Microservices in the Chronicle world are designed around:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Simplicity- simple is fast, flexable and easier to maintain.</p>
</li>
<li>
<p>Transparency- you can&#8217;t control what you don&#8217;t understand.</p>
</li>
<li>
<p>Reproduceablity- this must be in your design to ensure a quality solution.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_what_do_we_mean_by_simple">What do we mean by simple?</h3>
<div class="paragraph">
<p>A key part of the microservices design is how messages are passed between services/components. The simplest messages could be called <em>asynchronous method calls</em>.</p>
</div>
<div class="paragraph">
<p>An asynchronous method call is one which;</p>
</div>
<div class="ulist">
<ul>
<li>
<p>doesn&#8217;t return anything,</p>
</li>
<li>
<p>doesn&#8217;t alter it&#8217;s arguments;</p>
</li>
<li>
<p>doesn&#8217;t throw any exceptions (although the underlying transport could).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The reason this approach is used, is that the simplest transport is no transport at all.  One component calls another.  This is not only fast ( and with inlining might not take any time at all), but it is simple to setup, debug and profile.  For most unit tests you don&#8217;t need a real transport so there is no advantage in making the test more complicated than it needs to be.</p>
</div>
</div>
<div class="sect2">
<h3 id="_let_s_look_at_an_example">Let&#8217;s look at an example.</h3>
<div class="paragraph">
<p>Say we have a service/component which is taking incremental market data updates. In the simplest case, this could be a market update with only one side, a buy or a sell.  The component could transform this into a full market update combining both the buy and sell price and quantity.</p>
</div>
<div class="paragraph">
<p>In this example, we have only one message type to start with, however we can add more message types. I suggest you create a different message name/method for each message rather than overloading a method.</p>
</div>
<div class="listingblock">
<div class="title">Our inbound data structure</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class SidedPrice extends AbstractMarshallable {
    final String symbol;
    final long timestamp;
    final Side side;
    final double price, quantity;

    public SidedPrice(String symbol, long timestamp, Side side, double price, double quantity) {
        this.symbol = symbol;
        this.timestamp = timestamp;
        this.side = side;
        this.price = price;
        this.quantity = quantity;
    }
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Our outbound data structure</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class TopOfBookPrice extends AbstractMarshallable {
    final String symbol;
    final long timestamp;
    final double buyPrice, buyQuantity;
    final double sellPrice, sellQuantity;

    public TopOfBookPrice(String symbol, long timestamp, double buyPrice, double buyQuantity, double sellPrice, double sellQuantity) {
        this.symbol = symbol;
        this.timestamp = timestamp;
        this.buyPrice = buyPrice;
        this.buyQuantity = buyQuantity;
        this.sellPrice = sellPrice;
        this.sellQuantity = sellQuantity;
    }

    // more methods <i class="conum" data-value="1"></i><b>(1)</b>
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>For the complete code <a href="https://github.com/Vanilla-Java/Microservices/blob/master/src/main/java/net/openhft/samples/microservices/orders/TopOfBookPrice.java">TopOfBookPrice.java</a>.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The component which takes one sided prices could have an interface;</p>
</div>
<div class="listingblock">
<div class="title">Inbound interface for the first component</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public interface SidedMarketDataListener {
    void onSidedPrice(SidedPrice sidedPrice);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>and it&#8217;s output also has one method;</p>
</div>
<div class="listingblock">
<div class="title">Outbound interface for the first component</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public interface MarketDataListener {
    void onTopOfBookPrice(TopOfBookPrice price);
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_what_does_our_microservice_look_like">What does our microservice look like?</h3>
<div class="paragraph">
<p>At a high level, the combiner is very simple;</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class SidedMarketDataCombiner implements SidedMarketDataListener {
    final MarketDataListener mdListener;
    final Map&lt;String, TopOfBookPrice&gt; priceMap = new TreeMap&lt;&gt;();

    public SidedMarketDataCombiner(MarketDataListener mdListener) {
        this.mdListener = mdListener;
    }

    public void onSidedPrice(SidedPrice sidedPrice) {
        TopOfBookPrice price = priceMap.computeIfAbsent(sidedPrice.symbol, TopOfBookPrice::new);
        if (price.combine(sidedPrice))
            mdListener.onTopOfBookPrice(price);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>It implements our input interface and takes the output interface as a listener.</p>
</div>
</div>
<div class="sect2">
<h3 id="_what_does_abstractmarshallable_provide">What does AbstractMarshallable provide?</h3>
<div class="paragraph">
<p>The <a href="https://github.com/OpenHFT/Chronicle-Wire/blob/master/src/main/java/net/openhft/chronicle/wire/AbstractMarshallable.java">AbstractMarshallable</a> class is a convenience class which implements <code>toString()</code>, <code>equals(Object)</code> and <code>hashCode()</code>. It also supports Marshallable&#8217;s <code>writeMarshallable(WireOut)</code> and <code>readMarshallable(WireIn)</code>.</p>
</div>
<div class="paragraph">
<p>The default implementations use all the non-static non-transient fields to either print, compare or build a hashCode.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
the resulting toString() can always be <strong>de-serialized</strong> with <code>Marshallable.fromString(CharSequence)</code>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Let&#8217;s look at a couple of examples.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">SidedPrice sp = new SidedPrice("Symbol", 123456789000L, Side.Buy, 1.2345, 1_000_000);
assertEquals("!SidedPrice {\n" +
        "  symbol: Symbol,\n" +
        "  timestamp: 123456789000,\n" +
        "  side: Buy,\n" +
        "  price: 1.2345,\n" +
        "  quantity: 1000000.0\n" +
        "}\n", sp.toString());

// from string
SidedPrice sp2 = Marshallable.fromString(sp.toString());
assertEquals(sp2, sp);
assertEquals(sp2.hashCode(), sp.hashCode());</code></pre>
</div>
</div>
<div class="paragraph">
<p>As you can see, the <code>toString()</code> is in <a href="http://www.yaml.org/spec/1.2/spec.html">YAML</a><sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup>, concise, readable to a human and in code.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">TopOfBookPrice tobp = new TopOfBookPrice("Symbol", 123456789000L, 1.2345, 1_000_000, 1.235, 2_000_000);
assertEquals("!TopOfBookPrice {\n" +
        "  symbol: Symbol,\n" +
        "  timestamp: 123456789000,\n" +
        "  buyPrice: 1.2345,\n" +
        "  buyQuantity: 1000000.0,\n" +
        "  sellPrice: 1.235,\n" +
        "  sellQuantity: 2000000.0\n" +
        "}\n", tobp.toString());

// from string
TopOfBookPrice topb2 = Marshallable.fromString(tobp.toString());
assertEquals(topb2, tobp);
assertEquals(topb2.hashCode(), tobp.hashCode());
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>One of the advantages of using this format is that it makes it easier to find the reason for a failing test even in complex objects.</p>
</div>
<div class="listingblock">
<div class="title">Even in a trivial test it&#8217;s not obvious what the problem is</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">TopOfBookPrice tobp = new TopOfBookPrice("Symbol", 123456789000L, 1.2345, 1_000_000, 1.235, 2_000_000);
TopOfBookPrice tobp2 = new TopOfBookPrice("Symbol", 123456789000L, 1.2345, 1_000_000, 1.236, 2_000_000);

assertEquals(tobp, tobp2);</code></pre>
</div>
</div>
<div class="paragraph">
<p>However when you run this test in your  <a href="https://en.wikipedia.org/wiki/Integrated_development_environment">IDE</a><sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote.">2</a>]</sup>, you get a comparison window.</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="https://vanilla-java.github.io/images/TopOfBookPrice-comparison.png" alt="Top Of Book Price comparison" width="720">
</div>
<div class="title">Figure 1. Comparison Windows in your IDE</div>
</div>
<div class="paragraph">
<p>If you have a large nested/complex object where <code>assertEquals</code> fails, it can really save you a lot of time finding what the discrepency is.</p>
</div>
</div>
<div class="sect2">
<h3 id="_mocking_our_component">Mocking our component</h3>
<div class="paragraph">
<p>We can mock an interface using a tool like <a href="http://easymock.org/">EasyMock</a>. I find EasyMock is simpler when dealing with event driven interfaces. It is not as powerful as PowerMock or Mockito, however if you are keeping things simple, you might not need those features.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">// what we expect to happen
SidedPrice sp = new SidedPrice("Symbol", 123456789000L, Side.Buy, 1.2345, 1_000_000);
SidedMarketDataListener listener = createMock(SidedMarketDataListener.class);
listener.onSidedPrice(sp);
replay(listener);

// what happens
listener.onSidedPrice(sp);

// verify we got everything we expected.
verify(listener);</code></pre>
</div>
</div>
<div class="paragraph">
<p>We can also mock the expected output of a component the same way.</p>
</div>
</div>
<div class="sect2">
<h3 id="_testing_our_component">Testing our component</h3>
<div class="paragraph">
<p>By mocking the output interface and calling the input interface for our compoonent we can check it behaves as expected.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">MarketDataListener listener = createMock(MarketDataListener.class);
listener.onTopOfBookPrice(new TopOfBookPrice("EURUSD", 123456789000L, 1.1167, 1_000_000, Double.NaN, 0)); <i class="conum" data-value="1"></i><b>(1)</b>
listener.onTopOfBookPrice(new TopOfBookPrice("EURUSD", 123456789100L, 1.1167, 1_000_000, 1.1172, 2_000_000)); <i class="conum" data-value="2"></i><b>(2)</b>
replay(listener);

SidedMarketDataListener combiner = new SidedMarketDataCombiner(listener);
combiner.onSidedPrice(new SidedPrice("EURUSD", 123456789000L, Side.Buy, 1.1167, 1e6)); <i class="conum" data-value="1"></i><b>(1)</b>
combiner.onSidedPrice(new SidedPrice("EURUSD", 123456789100L, Side.Sell, 1.1172, 2e6)); <i class="conum" data-value="2"></i><b>(2)</b>

verify(listener);</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Setting the buy price</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Setting the sell price</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_testing_a_series_of_components">Testing a series of components</h3>
<div class="paragraph">
<p>Lets add an OrderManager as a down stream component. This order manager will receive both market data updates and order ideas, and in turn will produce orders.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">// what we expect to happen
OrderListener listener = createMock(OrderListener.class);
listener.onOrder(new Order("EURUSD", Side.Buy, 1.1167, 1_000_000));
replay(listener);

// build our scenario
OrderManager orderManager = new OrderManager(listener); <i class="conum" data-value="2"></i><b>(2)</b>
SidedMarketDataCombiner combiner = new SidedMarketDataCombiner(orderManager); <i class="conum" data-value="1"></i><b>(1)</b>

// events in
orderManager.onOrderIdea(new OrderIdea("EURUSD", Side.Buy, 1.1180, 2e6)); // not expected to trigger

combiner.onSidedPrice(new SidedPrice("EURUSD", 123456789000L, Side.Sell, 1.1172, 2e6));
combiner.onSidedPrice(new SidedPrice("EURUSD", 123456789100L, Side.Buy, 1.1160, 2e6));

combiner.onSidedPrice(new SidedPrice("EURUSD", 123456789100L, Side.Buy, 1.1167, 2e6));

orderManager.onOrderIdea(new OrderIdea("EURUSD", Side.Buy, 1.1165, 1e6)); // expected to trigger

verify(listener);</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The first component combines sided prices</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The second component listens to order ideas and top of book market data</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_debugging_our_components">Debugging our components</h3>
<div class="paragraph">
<p>You can see that one component just calls another. When debugging this single threaded code, each event from the first component is a call to the second component. When that finishes it returns to the first one and the tests.</p>
</div>
<div class="paragraph">
<p>When any individual event triggers an error, you can see in the <strong>stack trace</strong> which event caused the issue. However, if you are expecting an event which doesn&#8217;t happen, this is tricker unless your tests are simple (or you do a series of simple tests with <code>verify()</code>, <code>reset()</code> and <code>replay()</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
it takes almost no time at all to start up the test and debug it in your IDE.  You can run hundreds of tests like this in less than a second.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_source_for_examples">Source for examples</h3>
<div class="paragraph">
<p><a href="https://github.com/Vanilla-Java/Microservices/tree/master/src/main/java/net/openhft/samples/microservices" class="bare">https://github.com/Vanilla-Java/Microservices/tree/master/src/main/java/net/openhft/samples/microservices</a></p>
</div>
</div>
<div class="sect1">
<h2 id="_how_do_we_create_these_as_services">How do we create these as services?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We have shown how easy it is to test and debug our components. <a href="https://vanilla-java.github.io/2016/03/24/Microservices-in-the-Chronicle-world-Part-2.html">How do we turn these into services in Part 2</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_glossary">Glossary</h2>
<div class="sectionbody">
<div class="paragraph">
<p><strong>Microservices</strong>- Independantly deployable programmes that act as components in a larger network.</p>
</div>
<div class="paragraph">
<p><strong>Serialization</strong>- <a href="https://en.wikipedia.org/wiki/Serialization">"The process of translating data structures or object state into a format that can be stored"</a><sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnote_3" title="View footnote.">3</a>]</sup><em>See also</em> <strong>Serialization libraries</strong>- The process that translates data into a format that can be consumed by another system.</p>
</div>
<div class="paragraph">
<p><strong>Stack trace</strong>- "A report of the active <a href="http://stackoverflow.com/questions/10057443/explain-the-concept-of-a-stack-frame-in-a-nutshell">stack frames</a> at a certain point in time during the execution of a program."  <sup class="footnote">[<a id="_footnoteref_4" class="footnote" href="#_footnote_4" title="View footnote.">4</a>]</sup> // = Your Blog title</p>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. Ben-Kiki, et al (2009). YAML Ain’t Markup Language (YAML™) Version 1.2. Online. Available at: <a href="http://www.yaml.org/spec/1.2/spec.html" class="bare">http://www.yaml.org/spec/1.2/spec.html</a>. Accessed Jul. 2016
</div>
<div class="footnote" id="_footnote_2">
<a href="#_footnoteref_2">2</a>. Wikipedia. (2016). Integrated development environment. Online. Available at: <a href="https://en.wikipedia.org/wiki/Integrated_development_environment" class="bare">https://en.wikipedia.org/wiki/Integrated_development_environment</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_3">
<a href="#_footnoteref_3">3</a>. Wikipedia. (2016). Serialization. Online. Available at: <a href="https://en.wikipedia.org/wiki/Serialization" class="bare">https://en.wikipedia.org/wiki/Serialization</a>. Accessed Jul. 2016.
</div>
<div class="footnote" id="_footnote_4">
<a href="#_footnoteref_4">4</a>. Wikipedia. (2016). Stack trace. Online. Available at: <a href="https://en.wikipedia.org/wiki/Stack_trace" class="bare">https://en.wikipedia.org/wiki/Stack_trace</a>. Accessed Jul. 2016
</div>
</div>]]></description><link>https://vanilla-java.github.io/2018/03/25/Microservices-in-the-Chronicle-world-Part-1.html</link><guid isPermaLink="true">https://vanilla-java.github.io/2018/03/25/Microservices-in-the-Chronicle-world-Part-1.html</guid><category><![CDATA[Microservices]]></category><category><![CDATA[examples]]></category><dc:creator><![CDATA[Peter Lawrey]]></dc:creator><pubDate>Sun, 25 Mar 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[Micro-services for performance]]></title><description><![CDATA[<div class="sect1">
<h2 id="_overview">Overview</h2>
<div class="sectionbody">
<div class="paragraph">
<p><strong>Microservices</strong> is a buzz word at the moment. Is it really something original or based on established best practices? There are some disadvantages to the way microservices have been implemented, but can these be solved?</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_component_testability_and_consistency">Component testability and consistency</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Once you have assembled a large system, it can be hard or even impossible to profile where the highest delays come from. You can profile for average <strong>latency</strong> or <strong>throughput</strong>, but to achieve consistent latencies, you need to analyse key portions of your system.  This is where having simple components which run independently, and can be tested as stand alone, could help you achieve the consistency of your system needs end to end.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_the_unix_philosophy">The UNIX Philosophy</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Many of the key concepts of microservices have been used in distributed systems for many years.</p>
</div>
<div class="paragraph">
<p>Microservices have much in common with the  <a href="https://en.wikipedia.org/wiki/Unix_philosophy">Unix Philosophy</a><sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup></p>
</div>
<div class="paragraph">
<p><a href="https://en.wikipedia.org/wiki/Unix_philosophy#Mike_Gancarz:_The_UNIX_Philosophy">Mike Gancarz</a><sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote.">2</a>]</sup> is quoted as summed these principles as follows:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="ulist">
<ul>
<li>
<p>Small is beautiful.</p>
</li>
<li>
<p>Make each program do one thing well.</p>
</li>
<li>
<p>Build a prototype as soon as possible.</p>
</li>
<li>
<p>Choose portability over efficiency.</p>
</li>
<li>
<p>Store data in flat text files.</p>
</li>
<li>
<p>Use software leverage to your advantage.</p>
</li>
<li>
<p>Use <a href="https://en.wikipedia.org/wiki/Shell_script">shell scripts</a><sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnote_3" title="View footnote.">3</a>]</sup> to increase leverage and portability.</p>
</li>
<li>
<p>Avoid captive user interfaces.</p>
</li>
<li>
<p>Make every program a filter.</p>
</li>
</ul>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>The <a href="https://en.wikipedia.org/wiki/Microservices#Philosophy">Microservices Architecture</a><sup class="footnote">[<a id="_footnoteref_4" class="footnote" href="#_footnote_4" title="View footnote.">4</a>]</sup> is the UNIX Philosophy applied to <strong>distributed systems</strong>.</p>
</div>
<div class="paragraph">
<p>Philosophy of microservices architecture essentially equals the Unix philosophy of "Do one thing and do it well". It is described as follows:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="ulist">
<ul>
<li>
<p>The services are small - fine-grained to perform a single function.</p>
</li>
<li>
<p>The organization culture should embrace automation of deployment and testing. This eases the burden on management and operations.</p>
</li>
<li>
<p>The culture and design principles should embrace failure and faults, similar to anti-fragile systems.</p>
</li>
<li>
<p>Each service is elastic, resilient, composable, minimal, and complete.</p>
</li>
</ul>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>There are <a href="https://en.wikipedia.org/wiki/Microservices#Criticism">disadvantages</a><sup class="footnote">[<a id="_footnoteref_5" class="footnote" href="#_footnote_5" title="View footnote.">5</a>]</sup> to using a microservices archictecture some of which are;</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="ulist">
<ul>
<li>
<p>Services form information <a href="https://en.wikipedia.org/wiki/Barrier_(computer_science)">barriers</a><sup class="footnote">[<a id="_footnoteref_6" class="footnote" href="#_footnote_6" title="View footnote.">6</a>]</sup>.</p>
</li>
<li>
<p>The architecture introduces additional complexity and new problems to deal with, such as network latency, <a href="http://networking.xtreemhost.com/wp/?p=279&amp;ckattempt=1">message formats</a><sup class="footnote">[<a id="_footnoteref_7" class="footnote" href="#_footnote_7" title="View footnote.">7</a>]</sup>,
<a href="http://searchnetworking.techtarget.com/definition/load-balancing">load balancing</a> <sup class="footnote">[<a id="_footnoteref_8" class="footnote" href="#_footnote_8" title="View footnote.">8</a>]</sup> and
<a href="http://searchdisasterrecovery.techtarget.com/definition/fault-tolerant">fault tolerance</a><sup class="footnote">[<a id="_footnoteref_9" class="footnote" href="#_footnote_9" title="View footnote.">9</a>]</sup>. Ignoring one of these belongs to the "fallacies of distributed computing".</p>
</li>
<li>
<p>Testing and deployment are more complicated.</p>
</li>
<li>
<p>The complexity of a <a href="https://en.wikipedia.org/wiki/Monolithic_application">monolithic application</a><sup class="footnote">[<a id="_footnoteref_10" class="footnote" href="#_footnote_10" title="View footnote.">10</a>]</sup> is only shifted into the network, but persists.</p>
</li>
<li>
<p>Too-fine-grained microservices have been criticized as an anti-pattern.</p>
</li>
</ul>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>Can we get the best features of a monolith, and micro-services? Does it have to be one or the other?  Should we not use the approach which best suits our problem.  One of the key aspects of Micro-services is controlled deployment of an application. In which case, shouldn&#8217;t we be able to deploy components as a Monolith or Micro-services where it makes the most sense to do so.</p>
</div>
<div class="paragraph">
<p>Proposed alternatives to nanoservices include;</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="ulist">
<ul>
<li>
<p>Package the functionality as a <strong>library</strong>, rather than a service.</p>
</li>
<li>
<p>Combine the functionality with other functionalities, producing a more substantial, useful service.</p>
</li>
<li>
<p>Refactor the system, putting the functionality in other services or redesigning the system.</p>
</li>
</ul>
</div>
</blockquote>
</div>
</div>
</div>
<h1 id="_how_can_we_get_the_best_of_both_worlds" class="sect0">How can we get the best of both worlds?</h1>
<div class="sect1">
<h2 id="_make_sure_your_components_are_composable">Make sure your components are composable.</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If your components are composable, then they are always the right size.  You can combine them as needed into a collection of services, or everything into one service.</p>
</div>
<div class="paragraph">
<p>This is particularly important for testing and <strong>debugging</strong>.  You need to know a group of business components work together without the infrastructure (eg. Middleware) getting in the way.  For the purposes of a unit test, you may want to run all your components in one thread and have one directly call the other.  This can be no more complicated than testing components of a monolith where you can step through your code from one component to another and see exactly what is happening.</p>
</div>
<div class="paragraph">
<p>Only once your components work together correctly without infrastructure, do you need to test how they behave with infrastructure.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_make_your_infrastructure_as_fast_as_your_application_needs">Make your infrastructure as fast as your application needs.</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Low latency trading systems are distributed systems, and yet they also have very stringent latency requirements.  Most trading systems are designed to care about latencies much faster than you can see.  In the Java space, it is not unusual to see a trading system which needs to have latencies below 100 micro-seconds, 99% of the time or even 99.9% of the time.  This can be achieved using commodity hardware in a high level language like Java.</p>
</div>
<div class="paragraph">
<p>The keys to achieving low latencies are;</p>
</div>
<div class="ulist">
<ul>
<li>
<p>low latency infrastructure for messaging and logging. Ideally around a 1 micro-second for short messages,</p>
</li>
<li>
<p>a minimum of network hops,</p>
</li>
<li>
<p>a high level of reproduceability of real production load so you can study the 99%tile (worst 1 %) or 99.9%tile (worst 0.1%) latencies,</p>
</li>
<li>
<p>viewing each <strong>CPU core</strong> as having a specific task/service, with it&#8217;s own CPU cache data and code. The focus is on the distribution of your application between cores (rather than between computers).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Your L2 cache coherence bus is your messaging layer between high performance services.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="http://slideplayer.com/slide/3348635/"><img src="https://vanilla-java.github.io/images/L2-Cache-Coherence-small.jpg" alt="L2 Cache" width="230"></a>
</div>
</div>
<div class="paragraph">
<p>You can perform a CAS operation on the same data between two different cores. Here, each thread toggles the value set by the other thread with a round trip time of less than 50 nano-seconds on <a href="http://ark.intel.com/products/codename/29900/Sandy-Bridge#@All">Sandy Bridge processors</a><sup class="footnote">[<a id="_footnoteref_11" class="footnote" href="#_footnote_11" title="View footnote.">11</a>]</sup>, less on newer generations.</p>
</div>
<div class="paragraph">
<p>Examples of low latency instructure in Java are;</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/real-logic/Aeron">Aeron</a><sup class="footnote">[<a id="_footnoteref_12" class="footnote" href="#_footnote_12" title="View footnote.">12</a>]</sup> - A reliable UDP transport,</p>
</li>
<li>
<p><a href="https://github.com/OpenHFT/Chronicle-Queue">Chronicle Queue</a> - A persisted queue for messaging and logging.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>These transports have different advantages in terms of handling load balancing and <strong>failover</strong>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_make_the_message_format_a_configuration_consideration">Make the message format a configuration consideration.</h2>
<div class="sectionbody">
<div class="paragraph">
<p>There is a number of competing concerns in message formats. You want;</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Human readability so you can validate the messages are not only behaving correctly, but doing so in the manner you expect. I am often surprised how many issues I find by dumping a storage file or the message logs.</p>
</li>
<li>
<p>Machine friendly binary format for speed.</p>
</li>
<li>
<p>Flexability in terms of future schema changes. Flexability means adding redundancy so the software can cope with adding/removing fields and changing their data types in future. This redundancy is a waste if you don&#8217;t need it.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Ideally, you can choose the best option at testing/deployment time.</p>
</div>
<div class="paragraph">
<p>Some examples of <strong>serialization libraries</strong> where you can change the actual <strong>wire format</strong> to suit your needs are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/FasterXML/jackson-core">Jackson Speaming API</a><sup class="footnote">[<a id="_footnoteref_13" class="footnote" href="#_footnote_13" title="View footnote.">13</a>]</sup> - Which supports JSON, XML, CSV, CBOR (a binary format),</p>
</li>
<li>
<p><a href="https://github.com/OpenHFT/Chronicle-Wire">Chronicle Wire</a> - Which supports object serialization YAML, a number of different forms of Binary YAML, JSON, CSV, Raw data.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>What I found useful in <a href="http://www.yaml.org/spec/1.2/spec.html">YAML</a><sup class="footnote">[<a id="_footnoteref_14" class="footnote" href="#_footnote_14" title="View footnote.">14</a>]</sup> verses JSON, is the cleaner syntax which is designed to be human readable, rather than the subset of another language, the natural support for data types, comments, binary content and message seperators.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I think there is a lot of good ideas on how to use microservices, and I think many of the criticisms around them are based on how they have been implemented and I believe they are solvable.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_glossary">Glossary</h2>
<div class="sectionbody">
<div class="paragraph">
<p><strong>CPU core</strong>- <a href="http://www.makeuseof.com/tag/processor-core-makeuseof-explains-2/">"A processor core is a processing unit which reads in instructions to perform specific actions."</a><sup class="footnote">[<a id="_footnoteref_15" class="footnote" href="#_footnote_15" title="View footnote.">15</a>]</sup></p>
</div>
<div class="paragraph">
<p><strong>Debugging</strong>- the process of searching for and fixing defects in code.</p>
</div>
<div class="paragraph">
<p><strong>Distributed System</strong>- A collection of autonomous computers linked in a network by <a href="https://en.wikipedia.org/wiki/Middleware">middleware</a><sup class="footnote">[<a id="_footnoteref_16" class="footnote" href="#_footnote_16" title="View footnote.">16</a>]</sup>. A test can be distributed between a number of systems.</p>
</div>
<div class="paragraph">
<p><strong>Failover</strong>- <a href="http://www.webopedia.com/TERM/F/failover.html">"A backup operation that automatically switches to a standby server or network if the primary system fails or is temporarily shut down for servicing."</a><sup class="footnote">[<a id="_footnoteref_17" class="footnote" href="#_footnote_17" title="View footnote.">17</a>]</sup></p>
</div>
<div class="paragraph">
<p><strong>Latency</strong>- The time an individual operation takes. <a href="http://www.webopedia.com/TERM/L/latency.html">"Together, latency and bandwidth define the speed and capacity of a network."</a><sup class="footnote">[<a id="_footnoteref_18" class="footnote" href="#_footnote_18" title="View footnote.">18</a>]</sup></p>
</div>
<div class="paragraph">
<p><strong>Library</strong>- <a href="http://www.webopedia.com/TERM/L/library.html">"A collection of precompiled routines that a program can use."</a><sup class="footnote">[<a id="_footnoteref_19" class="footnote" href="#_footnote_19" title="View footnote.">19</a>]</sup></p>
</div>
<div class="paragraph">
<p><strong>Microservices</strong>- Independantly deployable programmes that act as components in a larger network.</p>
</div>
<div class="paragraph">
<p><strong>Throughput</strong>- The rate of data or messages transferred which is processed in a certain amount of time. This rate is written in terms of throughput, e.g a road could have a throughput of 10 cars per minute.</p>
</div>
<div class="paragraph">
<p><strong>Serialization libraries</strong>- The process that translates data into a format that can be consumed by another system.</p>
</div>
<div class="paragraph">
<p><strong>Wire format</strong>- A defined way for sending data between mechines as bytes.</p>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. Wikipedia. (2016). Unix philosophy. Online. Available at: <a href="https://en.wikipedia.org/wiki/Unix_philosophy" class="bare">https://en.wikipedia.org/wiki/Unix_philosophy</a>. Accessed: Mar. 2016
</div>
<div class="footnote" id="_footnote_2">
<a href="#_footnoteref_2">2</a>. Wikipedia. (2016). Unix philosophy. Online. Available at: <a href="https://en.wikipedia.org/wiki/Unix_philosophy#Mike_Gancarz:_The_UNIX_Philosophy" class="bare">https://en.wikipedia.org/wiki/Unix_philosophy#Mike_Gancarz:_The_UNIX_Philosophy</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_3">
<a href="#_footnoteref_3">3</a>. Wikipedia. (2016). Shell script. Online. Available at: <a href="https://en.wikipedia.org/wiki/Shell_script" class="bare">https://en.wikipedia.org/wiki/Shell_script</a>. Accessed Mar.  2016
</div>
<div class="footnote" id="_footnote_4">
<a href="#_footnoteref_4">4</a>. Wikipedia. (2016). Microservices. Online. Available at: <a href="https://en.wikipedia.org/wiki/Microservices#Philosophy" class="bare">https://en.wikipedia.org/wiki/Microservices#Philosophy</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_5">
<a href="#_footnoteref_5">5</a>. Wikipedia. (2016). Microservices. Online. Available at: <a href="https://en.wikipedia.org/wiki/Microservices#Criticism" class="bare">https://en.wikipedia.org/wiki/Microservices#Criticism</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_6">
<a href="#_footnoteref_6">6</a>. Shirako, J., et al (2008). Phasers. Proceedings of the 22nd annual international conference on Supercomputing - ICS '08. Online. Available at: <a href="https://en.wikipedia.org/wiki/Barrier_(computer_science" class="bare">https://en.wikipedia.org/wiki/Barrier_(computer_science</a>). Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_7">
<a href="#_footnoteref_7">7</a>. Luca, A. (2016). Message Formatting. Online. Available at: <a href="http://networking.xtreemhost.com/wp/?p=279&amp;ckattempt=1" class="bare">http://networking.xtreemhost.com/wp/?p=279&amp;ckattempt=1</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_8">
<a href="#_footnoteref_8">8</a>. Rouse, M. (2016). What is load balancing? - Definition from WhatIs.com. Online. Available at: <a href="http://searchnetworking.techtarget.com/definition/load-balancing" class="bare">http://searchnetworking.techtarget.com/definition/load-balancing</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_9">
<a href="#_footnoteref_9">9</a>. Rouse, M. (2016). What is fault-tolerant? - Definition from WhatIs.com. Online. Available at: <a href="http://searchdisasterrecovery.techtarget.com/definition/fault-tolerant" class="bare">http://searchdisasterrecovery.techtarget.com/definition/fault-tolerant</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_10">
<a href="#_footnoteref_10">10</a>. Wikipedia. (2016). Monolithic application. Online. Available at: <a href="https://en.wikipedia.org/wiki/Monolithic_application" class="bare">https://en.wikipedia.org/wiki/Monolithic_application</a> Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_11">
<a href="#_footnoteref_11">11</a>. Intel® ARK (Product Specs). (2016). Products (Formerly Sandy Bridge). Online. Available at: <a href="http://ark.intel.com/products/codename/29900/Sandy-Bridge#@All" class="bare">http://ark.intel.com/products/codename/29900/Sandy-Bridge#@All</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_12">
<a href="#_footnoteref_12">12</a>. GitHub. (2016). real-logic/Aeron. Online. Available at: <a href="https://github.com/real-logic/Aeron" class="bare">https://github.com/real-logic/Aeron</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_13">
<a href="#_footnoteref_13">13</a>. GitHub. (2016). FasterXML/jackson-core. Online. Available at: <a href="https://github.com/FasterXML/jackson-core" class="bare">https://github.com/FasterXML/jackson-core</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_14">
<a href="#_footnoteref_14">14</a>. Ben-Kiki, et al (2009). YAML Ain’t Markup Language (YAML™) Version 1.2. Online. Available at: <a href="http://www.yaml.org/spec/1.2/spec.html" class="bare">http://www.yaml.org/spec/1.2/spec.html</a>. Accessed Jul. 2016
</div>
<div class="footnote" id="_footnote_15">
<a href="#_footnoteref_15">15</a>. Stieben, D. (2012). What Is A Processor Core? MakeUseOf Explains. Online. Available at: <a href="http://www.makeuseof.com/tag/processor-core-makeuseof-explains-2/" class="bare">http://www.makeuseof.com/tag/processor-core-makeuseof-explains-2/</a>. Accessed Jul. 2016
</div>
<div class="footnote" id="_footnote_16">
<a href="#_footnoteref_16">16</a>. Wikipedia. (2016). Middleware. Online. Available at <a href="https://en.wikipedia.org/wiki/Middleware" class="bare">https://en.wikipedia.org/wiki/Middleware</a>. Accessed Jul.2016
</div>
<div class="footnote" id="_footnote_17">
<a href="#_footnoteref_17">17</a>. Webopedia.com. (2016). What is failover? Webopedia Definition. Online. Available at: <a href="http://www.webopedia.com/TERM/F/failover.html" class="bare">http://www.webopedia.com/TERM/F/failover.html</a>. Accessed Jul. 2016
</div>
<div class="footnote" id="_footnote_18">
<a href="#_footnoteref_18">18</a>. Webopedia.com. (2016). What is Latency? Webopedia Definition. Online. Available at: <a href="http://www.webopedia.com/TERM/L/latency.html" class="bare">http://www.webopedia.com/TERM/L/latency.html</a>. Accessed Jul. 2016
</div>
<div class="footnote" id="_footnote_19">
<a href="#_footnoteref_19">19</a>. Webopedia.com. (2016). What is Library? Webopedia Definition. Onilne. Available at: <a href="http://www.webopedia.com/TERM/L/library.html" class="bare">http://www.webopedia.com/TERM/L/library.html</a>. Accessed Jul. 2016
</div>
</div>]]></description><link>https://vanilla-java.github.io/2016/03/22/Micro-services-for-performance.html</link><guid isPermaLink="true">https://vanilla-java.github.io/2016/03/22/Micro-services-for-performance.html</guid><category><![CDATA[Microservices]]></category><category><![CDATA[design]]></category><dc:creator><![CDATA[Peter Lawrey]]></dc:creator><pubDate>Tue, 22 Mar 2016 00:00:00 GMT</pubDate></item></channel></rss>