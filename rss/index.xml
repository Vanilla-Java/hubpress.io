<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Vanilla Java]]></title><description><![CDATA[Vanilla Java]]></description><link>https://vanilla-java.github.io</link><image><url>https://raw.githubusercontent.com/Vanilla-Java/vanilla-java.github.io/master/images/French-Vanilla-Java.jpg</url><title>Vanilla Java</title><link>https://vanilla-java.github.io</link></image><generator>RSS for Node</generator><lastBuildDate>Sun, 25 Mar 2018 19:37:13 GMT</lastBuildDate><atom:link href="https://vanilla-java.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Microservices are about applying a group of Best Practices]]></title><description><![CDATA[<div class="sect2">
<h3 id="_microservices_denial">Microservices Denial</h3>
<div class="paragraph">
<p>A number of times clients have said; they can&#8217;t imagine their organisation using Microservices.
I found this surprising as I know those people are using many of the principles of Microservices already.</p>
</div>
<div class="paragraph">
<p>I can understand that they feel no need to join the hype around microservices, but the reality is, like it or not,
you are most likely using some of the best practices Microservices advocates.</p>
</div>
<div class="paragraph">
<p>Stages of denial</p>
</div>
<div class="ulist">
<ul>
<li>
<p>It all seems like hype, we don&#8217;t go in for that.</p>
</li>
<li>
<p>Perhaps not all hype, but does it really mean anything.</p>
</li>
<li>
<p>It all sounds pretty familiar.</p>
</li>
<li>
<p>It sounds like what we are doing already.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Formally or informally, most likely you have been following some best practices already.</p>
</div>
</div>
<div class="sect2">
<h3 id="_adopting_best_practices">Adopting Best Practices.</h3>
<div class="paragraph">
<p>Perhaps you don&#8217;t like the name Microservices, and perhaps not all the different things people
associate with Microservices are right for your team, your projects.  Instead lets consider how do you formalise what you are trying to achieve and finding a clearer path to adopting best practices.</p>
</div>
<div class="sect3">
<h4 id="_why_do_this_at_all">Why do this at all?</h4>
<div class="paragraph">
<p>Within larger teams there can be some disagreement as to how to proceed.  There can be strong feelings on what is bad, or broken about what you have and the temptation is to just throw away large portions of what you have or throw away everything.</p>
</div>
<div class="paragraph">
<p>The problem with doing this is you risk taking out the old known problems and putting in more new unknown ones.  You need to make changes, possibly selectively radical changes, which are manageable and achieveable for your team.</p>
</div>
<div class="paragraph">
<p>By formalising what you are talking about, even using buzz words, you can state more clearly what you are trying to achieve and why.  It gives you a common language in which to communicate your ideas.  It can give you a better perspective of where you are today and where you need to be.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_best_practices_scorecard">Best Practices Scorecard.</h3>
<div class="paragraph">
<p>Using a scorecard you can quickly see where you are today, where the quick wins are and where you need to be in the medium term.  A big part of the question; where are we today, is just rebranding what you have already.  This review can lead you to see in some ways you are not in as bad position as you might have imagined, while putting in to stark contrast the areas with the most opportunity to improve.</p>
</div>
<div class="sect3">
<h4 id="_initial_steps">Initial steps</h4>
<div class="paragraph">
<p>The initial steps I suggest are</p>
</div>
<div class="ulist">
<ul>
<li>
<p>rebrand what you have; you will have some best practices already.</p>
</li>
<li>
<p>quick wins; low risk changes could help improve your position.</p>
</li>
<li>
<p>medium term improvements; what do you need to achieve in the next six months.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_an_example">An example.</h3>
<div class="paragraph">
<p>This is a score card I put together for a senior manager for firm of over 60 developers. In the space of an hour we went from not considering Microservices, to being convinced it was a path to enhance their solutions.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<caption class="title">Table 1. Best Practice Scorecard</caption>
<colgroup>
<col style="width: 50%;">
<col style="width: 16.6666%;">
<col style="width: 16.6666%;">
<col style="width: 16.6668%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"></th>
<th class="tableblock halign-left valign-top">Today</th>
<th class="tableblock halign-left valign-top">Quick Wins</th>
<th class="tableblock halign-left valign-top">6 Months</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Simple bsuiness component based design.</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★★</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★★☆</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★★☆</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Distributed by JVM and Machine</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★★</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★★</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★★☆</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Service Discovery</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★☆</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★★</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Resilience to failure</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★☆</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★☆</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★★</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transport agnostic</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★☆</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★★</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Asynchronous messaging.</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★☆</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★★</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★★</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Automated, dynamic deployment of services.</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★☆</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★★</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★★☆</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Service local private data sets.</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">☆</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transparent messaging.</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">☆</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★★</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★★☆</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Lambda Architecture</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★★</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">★★★</p></td>
</tr>
</tbody>
</table>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
This is not intended to be an exhaustive list. It is what we reviewed in the first hour.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The last two areas were recognised as the most significant areas for improvement as they are both low risk but highly likely to reveal the cause of some of the recurring issues they have been having.</p>
</div>
<div class="paragraph">
<p>In particular, performance and stability issues require quality, detailed information about what your system is doing so you can take an informed view as what needs to be changed to fix it.</p>
</div>
</div>
<div class="sect2">
<h3 id="_conclusion">Conclusion</h3>
<div class="paragraph">
<p>Whether you love or loath Microservices, most likely you are using some Best Practices, and a review of the Best Practices used in Microservices may prove to be useful in seeing how you can improve what you have.</p>
</div>
<div class="sect3">
<h4 id="_contact_us">Contact Us.</h4>
<div class="paragraph">
<p><a href="http://chronicle.software/">Chronicle Software</a> provides one and two week workshop for starting new projects, training and consulting.  We provide <a href="http://chronicle.software/support/">Professional Support</a>. We sponsor open source software on github as well as a low latency FIX Engine and enterprise versions of a high performance <a href="http://chronicle.software/products/chronicle-queue/">Queue</a>, a key value store <a href="http://chronicle.software/products/chronicle-map/">Map</a> and a data distributions <a href="http://chronicle.software/products/chronicle-engine/">Engine</a></p>
</div>
<div class="paragraph">
<p>You can email us on <a href="mailto:sales@chronicle.software">sales@chronicle.software</a></p>
</div>
</div>
</div>]]></description><link>https://vanilla-java.github.io/2016/04/30/Microservices-are-about-applying-a-group-of-Best-Practices.html</link><guid isPermaLink="true">https://vanilla-java.github.io/2016/04/30/Microservices-are-about-applying-a-group-of-Best-Practices.html</guid><category><![CDATA[Microservices]]></category><category><![CDATA[Best Practice]]></category><dc:creator><![CDATA[Peter Lawrey]]></dc:creator><pubDate>Sat, 30 Apr 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Light weight Microservices]]></title><description><![CDATA[<div class="sect2">
<h3 id="_what_do_we_see_as_light_weight_microservices">What do we see as light weight Microservices?</h3>
<div class="paragraph">
<p>A key requirements for productivity is a short development lifecycle.
Every time you have to wait between changing code and knowing there is an error to be fixed, increases the cost of fixing that error.
You want fast feedback to ensure you stay productive.</p>
</div>
<div class="paragraph">
<p>Another key requirement is simple components which are easy to reason about.  One of the simplest is services which follow the Lambda Architecture.</p>
</div>
<div class="sect3">
<h4 id="_using_your_ide_as_much_as_possible">Using your IDE as much as possible.</h4>
<div class="paragraph">
<p>You should be able to</p>
</div>
<div class="ulist">
<ul>
<li>
<p>see most errors in your IDE as you type, before you even compile your code.</p>
</li>
<li>
<p>run your program using the Run button on your IDE.</p>
</li>
<li>
<p>debug your program by running it in your IDE.</p>
</li>
<li>
<p>profile your application from your IDE</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_run_your_application_quickly_on_your_desktop">Run your application quickly on your desktop</h4>
<div class="paragraph">
<p>It is essential to be able to run your service entirely from your desktop.  This allows you to</p>
</div>
<div class="ulist">
<ul>
<li>
<p>write repeatable unit tests for key components of your system.</p>
</li>
<li>
<p>run your application using state which is local to you.</p>
</li>
<li>
<p>work without contention on shared resources such as a shared development database.</p>
</li>
<li>
<p>reproduce production issues from your development environment.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_microservices_which_meets_your_business_needs">Microservices which meets your business needs.</h4>
<div class="paragraph">
<p>The components which make up you microservices should be</p>
</div>
<div class="ulist">
<ul>
<li>
<p>directly releated to a business requirement. If you couldn&#8217;t explain to an end user/business representaive why the component is needed to fulfill what they need, it&#8217;s not a business component.</p>
</li>
<li>
<p>the transport fo messages between services should be a seperate concern and even optional. e.g. for unit tests and debugging.</p>
</li>
<li>
<p>a microservice is not a browser, and how a browser talks to a web service is not the only model for how microservices can talk to each other.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_how_to_define_components">How to define components.</h3>
<div class="paragraph">
<p>When you define your components, it should be a direct reflection of the business function it performs.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>microservices should be coding in terms of top down design, sarting with <strong>what</strong> it needs to do at the highest level, calling methods which implement the <strong>how</strong> this is done.</p>
</li>
<li>
<p>transport considerations should be defined externally to the component.  The transport should not have any influence on the business requirements, and should be interchangeable.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_lambda_architecture">Lambda Architecture.</h3>
<div class="paragraph">
<p>Lambda Architecture (not the same as Lambdas in Java which are closures) provides a simple model for microservices to follow.  Not all microservices can follow the Lambda Architecture, however the more service which do follow it the easier your system will be to reason about.</p>
</div>
</div>]]></description><link>https://vanilla-java.github.io/2016/04/30/Light-weight-Microservices.html</link><guid isPermaLink="true">https://vanilla-java.github.io/2016/04/30/Light-weight-Microservices.html</guid><category><![CDATA[Microservices]]></category><category><![CDATA[Architecture]]></category><category><![CDATA[Design principles]]></category><dc:creator><![CDATA[Peter Lawrey]]></dc:creator><pubDate>Sat, 30 Apr 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Microservice with a Websocket transport]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>In this post, we will look at a simple component to publish market data and accept orders.  How can this be accessed using websockets as a transport?</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_our_service">Our service</h3>
<div class="listingblock">
<div class="title">Interface for messages from the client to the server</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public interface GUIGateway {
    void enableMarketData(boolean enabled);
    void newOrder(Order order);
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Interface for messages from the server to the client</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public interface GUIGatewayListener {
    void market(MarketData marketData);
    void order(OrderStatus orderStatus);
}</code></pre>
</div>
</div>
</div>]]></description><link>https://vanilla-java.github.io/2016/04/25/Microservice-with-a-Websocket-transport.html</link><guid isPermaLink="true">https://vanilla-java.github.io/2016/04/25/Microservice-with-a-Websocket-transport.html</guid><category><![CDATA[Microservices]]></category><category><![CDATA[Websockets]]></category><dc:creator><![CDATA[Peter Lawrey]]></dc:creator><pubDate>Mon, 25 Apr 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Bad String]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>This program has two threads printing messages alternatively.  However if you change a <code>String</code> from <code>"cC"</code> to <code>"cc"</code> it doesn&#8217;t print anything, WHY?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class PingPongMain {
    public static void main(String[] args) throws InterruptedException {
        new Thread(() -&gt; {
            try {
                synchronized ("bb") {
                    while (true) {
                        "bb".wait();
                        "bb".notifyAll();
                        System.out.println("b");
                    }
                }
            } catch (InterruptedException e) {
                throw new AssertionError(e);
            }
        }).start();
        Thread.sleep(100);
        setString("bb", 'c', 'C');
        new Thread(() -&gt; {
            try {
                // change "cC" to "cc" and this program prints nothing.
                synchronized ("cC") {
                    while (true) {
                        "cC".notifyAll();
                        "cC".wait();
                        System.out.println("c");
                    }
                }
            } catch (InterruptedException e) {
                throw new AssertionError(e);
            }
        }).start();

    }

    public static void setString(String s, char... chars) {
        try {
            Field value = String.class.getDeclaredField("value");
            value.setAccessible(true);
            value.set(s, chars);
        } catch (Exception e) {
            throw new AssertionError(e);
        }
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The solution is below</p>
</div>
<div class="paragraph">
<p>.</p>
</div>
<div class="paragraph">
<p>.</p>
</div>
<div class="paragraph">
<p>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://vanilla-java.github.io/images/omg_wtf.jpg" alt="omg wtf.jpg">
</div>
</div>
<div class="paragraph">
<p>.</p>
</div>
<div class="paragraph">
<p>.</p>
</div>
<div class="paragraph">
<p>.</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_a_combination_of_strangeness">A combination of strangeness</h4>
<div class="paragraph">
<p>There is a couple of elements to this puzzle</p>
</div>
<div class="ulist">
<ul>
<li>
<p>using a String literal as a Object to lock on.</p>
</li>
<li>
<p>corrupting a String in the literal pool.</p>
</li>
<li>
<p>replacing one String with another with the same hashCode so the replacement is found. "bb".hashCode() == "cC".hashCode()</p>
</li>
</ul>
</div>
</div>]]></description><link>https://vanilla-java.github.io/2016/04/21/Bad-String.html</link><guid isPermaLink="true">https://vanilla-java.github.io/2016/04/21/Bad-String.html</guid><category><![CDATA[Puzzler]]></category><dc:creator><![CDATA[Peter Lawrey]]></dc:creator><pubDate>Thu, 21 Apr 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[A JDBC Gateway Microservice]]></title><description><![CDATA[<div class="sect2">
<h3 id="_a_deep_dive_into_a_low_latency_microservice">A deep dive into a low latency microservice</h3>
<div class="paragraph">
<p>We look at a microservice which can run in it&#8217;s own JVM, can perform JDBC updates and queries via a persistent queue for in bound request and a queue for results.</p>
</div>
<div class="paragraph">
<p>In previous posts I looked at the theory behind there low latency micro-services so lets have a look at a micro-service which can do something useful.</p>
</div>
<div class="paragraph">
<p>I would consider this a Gateway Service as it interacts with a system which is outside the microservice model.</p>
</div>
</div>
<div class="sect2">
<h3 id="_what_does_this_service_do">What does this service do?</h3>
<div class="paragraph">
<p>The service supports two messages <code>executeQuery</code> and <code>executeUpdate</code>.  These methods mirror the same methods for <code>PreparedStatement</code> except the results are passed as messages</p>
</div>
<div class="listingblock">
<div class="title">Two asynchronous messages in</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public interface JDBCStatement {
    void executeQuery(String query, Class&lt;? extends Marshallable&gt; resultType, Object... args);

    void executeUpdate(String query, Object... args);
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Two asynchronous results, possibly with an Exception thrown</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public interface JDBCResult {
    void queryResult(Iterator&lt;Marshallable&gt; marshallableList, String query, Object... args);
    void queryThrown(Throwable t, String query, Object... args);

    void updateResult(long count, String update, Object... args);
    void updateThrown(Throwable t, String update, Object... args);
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_component_wrapped_as_a_service">Component wrapped as a Service</h3>
<div class="paragraph">
<p>As in previous posts, we create a component which can be executed without a transport.  This can be unit tested stand alone, or with a series of components without the transport complicating testing and debugging.</p>
</div>
<div class="listingblock">
<div class="title">Looking at the executorUpdate method</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class JDBCComponent implements JDBCStatement {
    private final Connection connection;
    private final JDBCResult result;

    public JDBCComponent(ThrowingSupplier&lt;Connection, SQLException&gt; connectionSupplier, JDBCResult result) throws SQLException {
        connection = connectionSupplier.get();
        this.result = result;
    }

    @Override
    public void executeUpdate(String query, Object... args) {
        try (PreparedStatement ps = connection.prepareStatement(query)) {
            for (int i = 0; i &lt; args.length; i++)
                ps.setObject(i + 1, args[i]);
            int count = ps.executeUpdate();
            // record the count.
            result.updateResult(count, query, args);
        } catch (Throwable t) {
            result.updateThrown(t, query, args);
        }
    }</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can see that every input message creates an output message with the results.  This will be useful later for restarting the service from where it got up to and monitoring it&#8217;s progress, as well as obtaining the results.</p>
</div>
<div class="listingblock">
<div class="title">How to wrap this as a service</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class JDBCService implements Closeable {
    private static final Logger LOGGER = LoggerFactory.getLogger(JDBCService.class);
    private final ChronicleQueue in;
    private final ChronicleQueue out;
    private final ExecutorService service;
    private final ThrowingSupplier&lt;Connection, SQLException&gt; connectionSupplier;
    private volatile boolean closed = false;

    public JDBCService(ChronicleQueue in, ChronicleQueue out, ThrowingSupplier&lt;Connection, SQLException&gt; connectionSupplier) throws SQLException {
        this.in = in;
        this.out = out;
        this.connectionSupplier = connectionSupplier;

        service = Executors.newSingleThreadExecutor(
                new NamedThreadFactory(in.file().getName() + "-JDBCService", true)); <i class="conum" data-value="1"></i><b>(1)</b>
        service.execute(this::runLoop); <i class="conum" data-value="2"></i><b>(2)</b>
        service.shutdown(); // stop when the task exits.
    }


    void runLoop() {
        try {
            JDBCResult result = out.createAppender() <i class="conum" data-value="3"></i><b>(3)</b>
                    .methodWriterBuilder(JDBCResult.class)
                    .recordHistory(true)
                    .get();
            JDBCComponent js = new JDBCComponent(connectionSupplier, result);
            MethodReader reader = in.createTailer().afterLastWritten(out).methodReader(js); <i class="conum" data-value="4"></i><b>(4)</b>
            Pauser pauser = new LongPauser(50, 200, 1, 10, TimeUnit.MILLISECONDS);
            while (!closed) {
                if (reader.readOne()) <i class="conum" data-value="5"></i><b>(5)</b>
                    pauser.reset();
                else
                    pauser.pause();
            }
        } catch (Throwable t) {
            LOGGER.error("Run loop exited", t);
        }
    }

    @Override
    public void close() {
        closed = true;
    }

    public JDBCStatement createWriter() {
        return in.createAppender() <i class="conum" data-value="6"></i><b>(6)</b>
                .methodWriterBuilder(JDBCStatement.class)
                .recordHistory(true)
                .get();
    }

    public MethodReader createReader(JDBCResult result) {
        return out.createTailer().methodReader(result);
    }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Create a thread with a meaningful name. We use an ExecutorService in case we want to do something more complex with it later.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Add this task to the pool</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Create a proxy to write to the output queue</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Start reading after the last message to be successfully processed.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Read one message at a time.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Add a helper method to create a writer to the input of this service</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Add a helper method to read the results of this service.</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_how_does_it_perform">How does it perform?</h3>
<div class="paragraph">
<p>I tested this writing to HSQLDB which is pretty fast, even writing to a file. Even so, using it as a Service could be useful for very bursty activity as we can handle much higher rates for periods of time.</p>
</div>
<div class="paragraph">
<p>The performance test writes 200K messages as fast as possible and waits for the to all complete.  The first timing is the average latency to write each request, and the second latency is the average time to receive the result.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>Average time to write each update 1.5 us, average time to perform each update 29.7 us</pre>
</div>
</div>
<div class="paragraph">
<p>While HSQLDB was able to sustain over 33 K updates per second, (1 / 29.7 us), the service wrapping could handle bursts of over 660K writes per second. (1 / 1.5 us)  This represents a 20 fold improvement in the burst throughput it can support.</p>
</div>
</div>
<div class="sect2">
<h3 id="_how_long_can_a_burst_be">How long can a burst be?</h3>
<div class="paragraph">
<p>Both Linux and Windows tend to perform well up to 10% of main memory being "dirty" or not written to disk. For example, if you have 256 GB, you can have 25 GB of "dirty" data.  Even so, if the burst rate is faster than the consuming service, but slow enough that the disk subsystem can keep up, your bursts can exceed main memory size.  To put that in context, if your messages are 256 bytes long, the service could be behind by more than one billion messages, and it will not run out of memory, or fail.  The main limitation in this case, is the amount of free disk space you have.  At the time of posting you can buy 1 TB of Enterprise SSD for less than $600, and Samsung is selling 16 TB SSD drives. I expect  storage costs will continue to fall.</p>
</div>
</div>
<div class="sect2">
<h3 id="_conclusion">Conclusion</h3>
<div class="paragraph">
<p>Building a microservice by wrapping a component with an asynchronous API with a transport for messaging in and out has worked without too much complexity.</p>
</div>
<div class="paragraph">
<p>The best way to go fast is to do less work.</p>
</div>
</div>]]></description><link>https://vanilla-java.github.io/2016/04/12/A-JDBC-Gateway-Microservice.html</link><guid isPermaLink="true">https://vanilla-java.github.io/2016/04/12/A-JDBC-Gateway-Microservice.html</guid><category><![CDATA[Microservices]]></category><category><![CDATA[JDBC]]></category><category><![CDATA[Example]]></category><dc:creator><![CDATA[Peter Lawrey]]></dc:creator><pubDate>Tue, 12 Apr 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Microservices in the Chronicle World - Part 5]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>In this part we look at putting a micro service together as a collection of services, and consider how we can evaluate the performance of these services.  We introduce JLBH (Java Latency Benchmark Harness) to test these services.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_building_a_service_wrapper">Building a Service Wrapper.</h3>
<div class="paragraph">
<p>For more complex services, we use an EventLoop in Chronicle Threads to manage multiple concurrent tasks. In this example we have only one task, so it is simpler to have a custom class to support it.</p>
</div>
<div class="paragraph">
<p>This class is available at <a href="https://github.com/Vanilla-Java/Microservices/blob/master/src/main/java/net/openhft/samples/microservices/ServiceWrapper.java">ServiceWrapper</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class ServiceWrapper&lt;I extends ServiceHandler&gt; implements Runnable, Closeable {
    private final ChronicleQueue inputQueue, outputQueue;
    private final MethodReader serviceIn;
    private final Object serviceOut;
    private final Thread thread;
    private final Pauser pauser = new LongPauser(1, 100, 500, 10_000, TimeUnit.MICROSECONDS); <i class="conum" data-value="1"></i><b>(1)</b>

    private volatile boolean closed = false;

    public ServiceWrapper(String inputPath, String outputPath, I serviceImpl) {
        Class outClass = ObjectUtils.getTypeFor(serviceImpl.getClass(), ServiceHandler.class); <i class="conum" data-value="2"></i><b>(2)</b>

        outputQueue = SingleChronicleQueueBuilder.binary(outputPath).build(); <i class="conum" data-value="3"></i><b>(3)</b>
        serviceOut = outputQueue.createAppender().methodWriter(outClass);
        serviceImpl.init(serviceOut); <i class="conum" data-value="4"></i><b>(4)</b>

        inputQueue = SingleChronicleQueueBuilder.binary(inputPath).build();
        serviceIn = inputQueue.createTailer().methodReader(serviceImpl); <i class="conum" data-value="5"></i><b>(5)</b>

        thread = new Thread(this, new File(inputPath).getName() + " to " + new File(outputPath).getName());
        thread.setDaemon(true);
        thread.start(); <i class="conum" data-value="6"></i><b>(6)</b>
    }

    @Override
    public void run() {
        AffinityLock lock = AffinityLock.acquireLock(); <i class="conum" data-value="7"></i><b>(7)</b>
        try {
            while (!closed) {
                if (serviceIn.readOne()) { <i class="conum" data-value="8"></i><b>(8)</b>
                    pauser.reset(); <i class="conum" data-value="9"></i><b>(9)</b>
                } else {
                    pauser.pause(); <i class="conum" data-value="9"></i><b>(9)</b>
                }
            }
        } finally {
            lock.release();
        }
    }

    @Override
    public void close() {
        closed = true;
    }

    @Override
    public boolean isClosed() {
        return closed;
    }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This Pauser controls the back off strategy in which no events are coming through. It will retry once, yield 100 times, then start sleeping from half a millisecond to 10 milliseconds.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Obtain the type of the parameter for the <code>ServiceHandler</code> and in this case it is a <code>Service</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Create an output queue.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>And pass it to the implementation so it can write to it&#8217;s output queue.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Create a reader for the input queue.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Start a thread which will read from the <code>serviceIn</code> reader.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Bind this thread to an isolated CPU where possible.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Read and process one message.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td><code>reset()</code> the pauser if a message came, otherwise call it for a possible pause.</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_timing_our_service">Timing our service.</h3>
<div class="paragraph">
<p>A simple service can time itself. This could be implmented as a wrapper, however for a more complex service you can use the builing in history recording and only examine the result at the end.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">class ServiceImpl implements Service, ServiceHandler&lt;Service&gt; {
    private final NanoSampler nanoSampler;
    private final NanoSampler endToEnd;
    private Service output;

    public ServiceImpl(NanoSampler nanoSampler) {
        this(nanoSampler, t -&gt; {
        });
    }

    public ServiceImpl(NanoSampler nanoSampler, NanoSampler endToEnd) {
        this.nanoSampler = nanoSampler;
        this.endToEnd = endToEnd;
    }

    @Override
    public void init(Service output) {
        this.output = output;
    }

    @Override
    public void simpleCall(SimpleData data) {
        data.number *= 10; // do something.

        long time = System.nanoTime();
        nanoSampler.sampleNanos(time - data.ts); <i class="conum" data-value="1"></i><b>(1)</b>
        data.ts = time; // the start time for the next stage.

        output.simpleCall(data); // pass the data to the next stage.

        endToEnd.sampleNanos(System.nanoTime() - data.ts0); <i class="conum" data-value="2"></i><b>(2)</b>
    }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Take the timing since the last stage</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Take the timing from the start</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_using_jlbh_java_latency_benchamrk_harness">Using JLBH Java Latency Benchamrk Harness</h3>
<div class="paragraph">
<p>This tool is based on JMH (Java Microbenchmark Harness) where the main difference is support for testing asynchronous processes where you want to examine the timings at different stages, possibly in different theads.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">JLBHOptions jlbhOptions = new JLBHOptions()
        .warmUpIterations(50_000)
        .iterations(MESSAGE_COUNT)
        .throughput(THROUGHPUT) <i class="conum" data-value="1"></i><b>(1)</b>
        .runs(6)
        .recordOSJitter(true) <i class="conum" data-value="2"></i><b>(2)</b>
        .pauseAfterWarmupMS(500)
        .accountForCoordinatedOmmission(ACCOUNT_FOR_COORDINATED_OMMISSION) <i class="conum" data-value="3"></i><b>(3)</b>
        .jlbhTask(new MultiThreadedMainTask());
new JLBH(jlbhOptions).start();</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Benchmark for a target throughput.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Add a thread to record the OS jitter over the interval.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Turn on correction for coordinated ommission.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>To set up the test, we create three services. This models a gateway which accepting data from external systems such as aweb service or FIX Engine.  This is picked up by one service, which passes a message to a second service and finally this is written to a gateway service which can pass the data to an external system.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">UUID uuid = UUID.randomUUID();
String queueIn = OS.TMP + "/MultiThreadedMain/" + uuid + "/pathIn";
String queue2 = OS.TMP + "/MultiThreadedMain/" + uuid + "/stage2";
String queue3 = OS.TMP + "/MultiThreadedMain/" + uuid + "/stage3";
String queueOut = OS.TMP + "/MultiThreadedMain/" + uuid + "/pathOut";

@Override
public void init(JLBH jlbh) {
    serviceIn = SingleChronicleQueueBuilder.binary(queueIn).build().createAppender().methodWriter(Service.class); <i class="conum" data-value="1"></i><b>(1)</b>
    service2 = new ServiceWrapper&lt;&gt;(queueIn, queue2, new ServiceImpl(jlbh.addProbe("Service 2"))); <i class="conum" data-value="2"></i><b>(2)</b>
    service3 = new ServiceWrapper&lt;&gt;(queue2, queue3, new ServiceImpl(jlbh.addProbe("Service 3"))); <i class="conum" data-value="3"></i><b>(3)</b>
    serviceOut = new ServiceWrapper&lt;&gt;(queue3, queueOut, new ServiceImpl(jlbh.addProbe("Service Out"), jlbh)); <i class="conum" data-value="4"></i><b>(4)</b> <i class="conum" data-value="5"></i><b>(5)</b>
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Just a writer</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Reads that message and writes to the third service</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Reads from the second service and writes to the outbound service.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The output gateway reads from the third service and writes its result to a log/queue.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The last service also sets the end to end timing.</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Every message is being persisted at each stage and is available on restart. As there is one output message for every input pmessage you could restart by winding to the same index as the output. A more robust strategy would be to record te history in the output as covered in the previous post.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_running_the_tests">Running the tests</h3>
<div class="paragraph">
<p>There are two important considerations when running performance tests</p>
</div>
<div class="ulist">
<ul>
<li>
<p>what is the percentile that you care about?</p>
<div class="ulist">
<ul>
<li>
<p>Typical,</p>
</li>
<li>
<p>99%tile (worst 1 in 100)</p>
</li>
<li>
<p>99.9%tile (worst 1 in 1000)</p>
</li>
<li>
<p>99.99%tile ( worst 1 in 10000)</p>
</li>
<li>
<p>worst, ever</p>
</li>
</ul>
</div>
</li>
<li>
<p>what is the throughput you are looking to test.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>It is important that you control the throughput for the test so you can see how your system behaves at different sustained throuhgputs.  You system will run as fast as possible for short periods, however buffers and caches quickly fill up and cannot support this rate without getting large delays.</p>
</div>
</div>
<div class="sect2">
<h3 id="_looking_at_the_typical_performance">Looking at the typical performance.</h3>
<div class="paragraph">
<p>In this test on a E5-2650 v2, the throughput it can achieve for this test is 600,000 messages/second.  However, it wouldn&#8217;t be practical to do this for any long period of time as the system quickly gets to the point where it is behind with increasing delay the long this goes on.  This is because there is no head room to deal with any jitter or delay in the system. Every delay accumulates as the system struggle to keeps up. So what is a more practical throughput for this mock system.</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="https://vanilla-java.github.io/images/mtm-typical-vs-rate.png" alt="mtm typical vs rate.png">
</div>
<div class="title">Figure 1. Worst Typical was the highest of 15, 2 minute runs.</div>
</div>
<div class="paragraph">
<p>This looks fine, for all the throughputs up to 400,000 messages per second, the typical performance is consistent.  However, for a throughput of 450,000 messages per second, the service could get a delay which it would struggle to recover from and the typical latency would jump to 20 - 40 seconds.</p>
</div>
<div class="paragraph">
<p>In short, by looking at the typical performance our estimate of throughput we might prefer has dropped from 600K/s to 400K/s</p>
</div>
</div>
<div class="sect2">
<h3 id="_looking_at_the_nines">Looking at the nines.</h3>
<div class="paragraph">
<p>By looking at the higher percentiles (worst results) we can for a view as to what delays would be acceptable and how often.  Typically, I would consider a 99%tile which 4x the typical and a 99.9%tile which 10x the typical latency.  This is rule of thumb I use, however the results vary between systems.</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="https://vanilla-java.github.io/images/mtm-99-vs-rate.png" alt="mtm 99 vs rate.png">
</div>
<div class="title">Figure 2. The worst 1 in 100 gets higher as the throughput increases.</div>
</div>
<div class="paragraph">
<p>You might take the view that the 99%tile should be under 10 micro-seconds, and conclude the system can handle 300K messages/second.</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="https://vanilla-java.github.io/images/mtm-999-vs-rate.png" alt="mtm 999 vs rate.png">
</div>
<div class="title">Figure 3. The worst 1 in 1000 gets higher as the throughput increases.</div>
</div>
<div class="paragraph">
<p>Looking at the 99.9%tile you can see that above 200K msg/second our latencies shoot up.  Up to 200 K/s our system has very stable latencies.</p>
</div>
</div>
<div class="sect2">
<h3 id="_can_we_sustain_200_k_msg_second">Can we sustain 200 K msg/second?</h3>
<div class="paragraph">
<p>The problem arises that we will not want to sustain this rate for long.  Bursts are fine, but do this all day long and you generate a lot of data. If all the messages are recorded and they total say 1/2 KB for each inbound message, this will be producing 200 MB/s, and while an SSD can do this easily it will run out of space pretty fast. 200 MB/s is 9 TB per day. Nine TB of usable high performance SSD is still pretty pricy.</p>
</div>
<div class="paragraph">
<p>Lets say we wanted to record less than 2 TB per day.  A few high capacity HDD could persist all your messages for a week. This is 23 MB/s sustained. At 512 bytes per message (total) you are looking at a more modest 50K message/second sustained, but with burst of up to 200K/s - 600K/s depending on your requirements.</p>
</div>
</div>
<div class="sect2">
<h3 id="_in_summary">In summary</h3>
<div class="paragraph">
<p>We have a test harness for multi-threaded asynchronous processes and it can help you explore how your service might behave under various throughput loads.  While your system might be able to support high throughputs for very short periods of time, how sustained throughput impacts the latency of your system.</p>
</div>
</div>]]></description><link>https://vanilla-java.github.io/2016/04/02/Microservices-in-the-Chronicle-World-Part-5.html</link><guid isPermaLink="true">https://vanilla-java.github.io/2016/04/02/Microservices-in-the-Chronicle-World-Part-5.html</guid><category><![CDATA[Microservices]]></category><category><![CDATA[latency profile]]></category><category><![CDATA[JLBH]]></category><dc:creator><![CDATA[Peter Lawrey]]></dc:creator><pubDate>Sat, 02 Apr 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Microservices in the Chronicle world - Part 4]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>A common issue we cover in our workshops is, <em>how to restart a queue reader after a failure.</em></p>
</div>
<div class="paragraph">
<p>The answer is not a simple as you might think.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
We do an on-site one week workshop to help kick start a new project, with a look at ensuring the infrastructure has a good balance of speed and simplicity.  Often, simplicity is the most important and it will also be fast enough. You can contact <a href="mailto:sales@chronicle.software">Chronicle Software Sales</a> for more details.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_knowing_when_a_message_should_be_replayed_on_startup">Knowing when a message should be replayed on startup.</h3>
<div class="paragraph">
<p>It&#8217;s not enough to know which messages have been played.  You need to know which messages were completed successfully in a transaction. This assumes you must have each message processed exactly once. Simpler alternatives are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Play every message again and ignore duplicates.</p>
</li>
<li>
<p>Play every message from the end (or the last <em>N</em> minutes) and assume anything older than that has expired.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>When updating a database, one way to achieve this is to update the index read in a row in the database, this way either:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The transaction succeeds and the message doesn&#8217;t need to be played again.</p>
</li>
<li>
<p>The transaction fails and the message does need to be played again.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The important detail is that there is no situation where it is unclear whether the input message should be replayed.</p>
</div>
</div>
<div class="sect2">
<h3 id="_restarting_a_reader_when_writing_to_a_queue_as_output">Restarting a reader when writing to a queue as output.</h3>
<div class="paragraph">
<p>In general, we suggest you write your results to an output queue.  An output queue can be a replacement for logging and a means of monitoring, but can also record where each event came from.
In particular, and output queue can help:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Replay messages in the same order, which were sourced from multiple input queue.</p>
</li>
<li>
<p>Ensure that after an upgrade of your software, you honour the decisions you made earlier. i.e. new software replaying the input message might make different decisions. By reading from the output, you ensure that after an upgrade you know what state you should be in.</p>
</li>
<li>
<p>Restart an input queue from the last message successfully outputed for an input from that queue.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In this example, it reads just one unprocessed message.</p>
</div>
<div class="listingblock">
<div class="title">Read one message which hasn&#8217;t been processed.</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">try (SingleChronicleQueue in = SingleChronicleQueueBuilder.binary(queuePath)
        .sourceId(1) <i class="conum" data-value="1"></i><b>(1)</b>
        .build();
     SingleChronicleQueue out = SingleChronicleQueueBuilder.binary(queuePath2)
             .rollCycle(RollCycles.TEST_DAILY)
             .build()) {

    MarketDataListener mdListener = out.createAppender()
            .methodWriterBuilder(MarketDataListener.class)
            .recordHistory(true) <i class="conum" data-value="2"></i><b>(2)</b>
            .get();
    SidedMarketDataCombiner combiner = new SidedMarketDataCombiner(mdListener);
    MethodReader reader = in.createTailer()
            .afterLastWritten(out) <i class="conum" data-value="3"></i><b>(3)</b>
            .methodReader(combiner);
    assertTrue(reader.readOne());
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Give the queue a unique id for tracing purposes.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Write a history for timings and sources for each message processed.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Read the output queue to see what the last message processed was.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>It would be really inefficient to do all this every time. The only line which is required for each message is</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">reader.readOne();</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_conclusion">Conclusion</h3>
<div class="paragraph">
<p>While there is a number of ways you could implement restart, if you need it, it is useful to have built-in support for one of the most common ways to do this.</p>
</div>
</div>
<div class="sect2">
<h3 id="_in_the_next_part">In the next part.</h3>
<div class="paragraph">
<p><a href="https://vanilla-java.github.io/2016/04/02/Microservices-in-the-Chronicle-World-Part-5.html">How does this perform end to end with multiple asynchronous services are how can we measure there?</a></p>
</div>
</div>]]></description><link>https://vanilla-java.github.io/2016/03/29/Microservices-in-the-Chronicle-world-Part-4.html</link><guid isPermaLink="true">https://vanilla-java.github.io/2016/03/29/Microservices-in-the-Chronicle-world-Part-4.html</guid><category><![CDATA[Microservices]]></category><category><![CDATA[Restarting]]></category><dc:creator><![CDATA[Peter Lawrey]]></dc:creator><pubDate>Tue, 29 Mar 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Microservices in the Chronicle World - Part 3]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>One of the problems with using microservices is performance.  <strong>Latencies</strong> can be higher due to the cost of <strong>serialization</strong>, messaging and deserialization, and this reduces <strong>throughput</strong>.  In particular, poor throughput is a problem because the reason we are designing a <a href="http://searchdatacenter.techtarget.com/definition/scalability">scalable system</a><sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup> is to increase throughput.</p>
</div>
<div class="paragraph">
<p>In <a href="https://vanilla-java.github.io/2016/03/24/Microservices-in-the-Chronicle-world-Part-2.html">Part 2</a> we saw how we can take a component and add a transport to it to make it a service.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Passing data between threads is not free. This information needs to be passed over the L2 CPU Cache Coherence bus. If you do this in an uncontrolled manner and just let the application discover the objects it needs to pull from one thread&#8217;s cache to its own, it can be slower than only passing the data you need, streamed serially. Chronicle Queue gives greater transparency by recording every event, allowing you to optmise exactly what one thread passes to another.
</td>
</tr>
</table>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
In one low latency trading system, before adding Chronicle Queue, the average latency from read in to write out was 35 micro-seconds, after utilising Chronicle Queue to optimie the data passed between threads the latency dropped to 23 micro-seconds. Using Chronicle Queue also showed up issues which were not apparent before, and with replay of events, gave confidence these issues had been fixed.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_benchmarking_with_jmh">Benchmarking with JMH</h3>
<div class="paragraph">
<p><a href="http://openjdk.java.net/projects/code-tools/jmh/">JMH</a><sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote.">2</a>]</sup>(Java Micro-benchmark Harness) is an excellent tool for measuring the throughput and sampling latencies end to end.  We can look at an example of what it is good for with regard to our sample microservice.</p>
</div>
<div class="paragraph">
<p>We create our own micro-benchmark harness, in Chronicle-Core, for measuring asynchronmos tasks run across multiple threads where you want to time individual portions (which will be covered in Part 4). For now we will look at latencies end-to-end.</p>
</div>
</div>
<div class="sect2">
<h3 id="_jmh_latency_test_of_our_service">JMH latency test of our service</h3>
<div class="paragraph">
<p>With JMH we can measure timings for the end to end benchmark. We have to include a producer to drive the test rather than time a service standalone. We are looking at the single threaded timings.</p>
</div>
<div class="listingblock">
<div class="title">Our JMH benchmark</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">@Setup
public void setup() {
    String target = OS.TMP;
    upQueuePath = new File(target, "ComponentsBenchmark-up-" + System.nanoTime());
    upQueue = SingleChronicleQueueBuilder.binary(upQueuePath).build(); <i class="conum" data-value="1"></i><b>(1)</b>
    smdWriter = upQueue.createAppender().methodWriter(SidedMarketDataListener.class);  <i class="conum" data-value="2"></i><b>(2)</b>

    downQueuePath = new File(target, "ComponentsBenchmark-down-" + System.nanoTime());
    downQueue = SingleChronicleQueueBuilder.binary(downQueuePath).build();  <i class="conum" data-value="3"></i><b>(3)</b>
    MarketDataListener mdWriter = downQueue.createAppender().methodWriter(MarketDataListener.class); <i class="conum" data-value="4"></i><b>(4)</b>

    SidedMarketDataCombiner combiner = new SidedMarketDataCombiner(mdWriter); <i class="conum" data-value="5"></i><b>(5)</b>

    reader = upQueue.createTailer().methodReader(combiner); <i class="conum" data-value="6"></i><b>(6)</b>
    System.out.println("up-q " + upQueuePath);
}

@TearDown
public void tearDown() {
    upQueue.close();
    downQueue.close();
    IOTools.shallowDeleteDirWithFiles(upQueuePath);
    IOTools.shallowDeleteDirWithFiles(downQueuePath);
}

@Benchmark
public void benchmarkComponents() {
    switch (counter++ &amp; 3) {
        case 0:
            smdWriter.onSidedPrice(sidedPrice.init("EURUSD", 123456789000L, Side.Sell, 1.1172, 1e6));
            break;
        case 1:
            smdWriter.onSidedPrice(sidedPrice.init("EURUSD", 123456789100L, Side.Buy, 1.1160, 1e6));
            break;
        case 2:
            smdWriter.onSidedPrice(sidedPrice.init("EURUSD", 123456789000L, Side.Sell, 1.1172, 2e6));
            break;
        case 3:
            smdWriter.onSidedPrice(sidedPrice.init("EURUSD", 123456789100L, Side.Buy, 1.1160, 2e6));
            break;
    }
    assertTrue(reader.readOne()); <i class="conum" data-value="7"></i><b>(7)</b>
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Create an upstream queue.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Create a proxy which writes all methods calls to the upstream queue.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Create a downstream queue.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Create a proxy for the downstream queue.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Create the component which will write all outputs to the downstream queue.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Create a reader for the upstream queue which will call the combiner.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>After writing a message to the queue, read it and call the appropriate method in the component.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The first portion sets up and tears down the test.  The actual benchmark injects a message which when read and processed will trigger an output message.</p>
</div>
<div class="listingblock">
<div class="title">Running the tests in JMH</div>
<div class="content">
<pre>  Percentiles, us/op:
      p(0.0000) =      2.552 us/op
     p(50.0000) =      2.796 us/op
     p(90.0000) =      5.600 us/op
     p(95.0000) =      5.720 us/op
     p(99.0000) =      8.496 us/op <i class="conum" data-value="1"></i><b>(1)</b>
     p(99.9000) =     15.232 us/op <i class="conum" data-value="1"></i><b>(1)</b>
     p(99.9900) =     19.977 us/op <i class="conum" data-value="2"></i><b>(2)</b>
     p(99.9990) =    422.475 us/op
     p(99.9999) =    438.784 us/op
    p(100.0000) =    438.784 us/op</pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Critical latency threashold for many systems.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Can still be important in some systems.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>This is running on my development machine (Ubuntu 15.04, two E5-2650 v2, 128 GB memory).  For better results, I suggest the latest Haswell or Skylake and Centos.  The exact timing of this benchmark isn&#8217;t important as the number and type of fields in the message is also a significant factor.  What is particularly interesting to me is the 99.9%tile latency (worst 1 in 1000) which is consistently under 20 mciro-seconds in this example.  This demonstrates both high performance and consistently fast latencies.</p>
</div>
</div>
<div class="sect2">
<h3 id="_looking_at_how_jmh_is_called">Looking at how JMH is called.</h3>
<div class="paragraph">
<p>To control how JMH is run the following parameters were used:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">int time = Boolean.getBoolean("longTest") ? 30 : 3;
System.out.println("measurementTime: " + time + " secs");
Options opt = new OptionsBuilder()
        .include(ComponentsBenchmark.class.getSimpleName())
        .warmupIterations(8)
        .forks(1)
        .mode(Mode.SampleTime) <i class="conum" data-value="1"></i><b>(1)</b>
        .measurementTime(TimeValue.seconds(time))
        .timeUnit(TimeUnit.MICROSECONDS)
        .build();

new Runner(opt).run();</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td><code>SampleTime</code> mode to test latencies rather than throughput.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>However, I have had trouble profiling and debugging JMH benchmarks so I change the way the test is run depending on how it is started:</p>
</div>
<div class="listingblock">
<div class="title">Running in Flight Recorder and Debug</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">if (Jvm.isFlightRecorder()) {
    // -verbose:gc -XX:+UnlockCommercialFeatures -XX:+FlightRecorder
    // -XX:StartFlightRecording=dumponexit=true,filename=myrecording.jfr,settings=profile
    // -XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints <i class="conum" data-value="2"></i><b>(2)</b>
    System.out.println("Detected Flight Recorder");
    main.setup();
    long start = System.currentTimeMillis();
    while (start + 60e3 &gt; System.currentTimeMillis()) { <i class="conum" data-value="1"></i><b>(1)</b>
        for (int i = 0; i &lt; 1000; i++)
            main.benchmarkComponents();
    }
    main.tearDown();

} else if (Jvm.isDebug()) {
    for (int i = 0; i &lt; 10; i++) {
        runAll(main, Setup.class);
        runAll(main, Benchmark.class);
        runAll(main, TearDown.class);
    }</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Run for 1 minute before shutting down.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Enable profiling between safepoints.</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_in_our_next_part">In our next part</h3>
<div class="paragraph">
<p><a href="https://vanilla-java.github.io/2016/03/29/Microservices-in-the-Chronicle-world-Part-4.html">Part 4: How can we time just the component running in another thread</a>. In particular see how long it takes to read, process and write each message with individual timings.</p>
</div>
</div>
<div class="sect1">
<h2 id="_glossary">Glossary</h2>
<div class="sectionbody">
<div class="paragraph">
<p><strong>Latency</strong>- The time an individual operation takes. <a href="http://www.webopedia.com/TERM/L/latency.html">"Together, latency and bandwidth define the speed and capacity of a network."</a><sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnote_3" title="View footnote.">3</a>]</sup></p>
</div>
<div class="paragraph">
<p><strong>Serialization</strong>- <a href="https://en.wikipedia.org/wiki/Serialization">"The process of translating data structures or object state into a format that can be stored"</a><sup class="footnote">[<a id="_footnoteref_4" class="footnote" href="#_footnote_4" title="View footnote.">4</a>]</sup><em>See also</em> <strong>Serialization libraries</strong>- The process that translates data into a format that can be consumed by another system.</p>
</div>
<div class="paragraph">
<p><strong>Throughput</strong>- The rate of data or messages transferred which is processed in a certain amount of time. This rate is written in terms of throughput, e.g a road could have a throughput of 10 cars per minute.</p>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. Rouse, M. (2016). What is scalability? - Definition from WhatIs.com. Online. SearchDataCenter. Available at: <a href="http://searchdatacenter.techtarget.com/definition/scalability" class="bare">http://searchdatacenter.techtarget.com/definition/scalability</a> [Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_2">
<a href="#_footnoteref_2">2</a>. Openjdk.(2016). OpenJDK: jmh. Online. Available at: <a href="http://openjdk.java.net/projects/code-tools/jmh/" class="bare">http://openjdk.java.net/projects/code-tools/jmh/</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_3">
<a href="#_footnoteref_3">3</a>. Webopedia.com. (2016). What is Latency? Webopedia Definition. Online. Available at: <a href="http://www.webopedia.com/TERM/L/latency.html" class="bare">http://www.webopedia.com/TERM/L/latency.html</a>. Accessed Jul. 2016
</div>
<div class="footnote" id="_footnote_4">
<a href="#_footnoteref_4">4</a>. Wikipedia. (2016). Serialization. Online. Available at: <a href="https://en.wikipedia.org/wiki/Serialization" class="bare">https://en.wikipedia.org/wiki/Serialization</a>. Accessed Jul. 2016.
</div>
</div>]]></description><link>https://vanilla-java.github.io/2016/03/26/Microservices-in-the-Chronicle-World-Part-3.html</link><guid isPermaLink="true">https://vanilla-java.github.io/2016/03/26/Microservices-in-the-Chronicle-World-Part-3.html</guid><category><![CDATA[Microservices]]></category><category><![CDATA[JMH]]></category><category><![CDATA[Chronicle-Queue]]></category><dc:creator><![CDATA[Peter Lawrey]]></dc:creator><pubDate>Sat, 26 Mar 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Microservices in the Chronicle world - Part 2]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>In this part we look at turning a component into a service.</p>
</div>
<div class="paragraph">
<p>In <a href="https://vanilla-java.github.io/2016/03/23/Microservices-in-the-Chronicle-world-Part-1.html">Part 1</a>, we looked at how we can easily create and test components which expect <a href="http://www.webopedia.com/TERM/A/asynchronous_messaging.html">asynchronous messages</a><sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup> in and produce asynchronous messages out.  However, how do we turn this into a <strong>service</strong>?</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_turning_our_components_into_a_service">Turning our components into a service.</h3>
<div class="paragraph">
<p>The key thing which is missing from our components is a <strong>transport</strong>.  A lack of a transport simplifies testing, profiling and debugging, but we need to distribute our components, and for this we need a transport.</p>
</div>
<div class="paragraph">
<p>There is a wide range of possible transports available:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="http://chronicle.software/products/chronicle-queue/">Chronicle Queue</a></p>
</li>
<li>
<p>Raw TCP messages or UDP packets with a library like <a href="http://netty.io/">Netty</a><sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote.">2</a>]</sup></p>
</li>
<li>
<p><a href="https://docs.oracle.com/javaee/6/tutorial/doc/bnceh.html">JMS Messaging</a><sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnote_3" title="View footnote.">3</a>]</sup></p>
</li>
<li>
<p><a href="https://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services">REST API</a><sup class="footnote">[<a id="_footnoteref_4" class="footnote" href="#_footnote_4" title="View footnote.">4</a>]</sup></p>
</li>
<li>
<p>Database tables via <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/">JDBC</a><sup class="footnote">[<a id="_footnoteref_5" class="footnote" href="#_footnote_5" title="View footnote.">5</a>]</sup></p>
</li>
<li>
<p>Files dropped into a directory and use the directory <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/WatchService.html">WatchService</a><sup class="footnote">[<a id="_footnoteref_6" class="footnote" href="#_footnote_6" title="View footnote.">6</a>]</sup></p>
</li>
<li>
<p>a thread safe Queue, like <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html">BlockingQueue</a></p>
</li>
<li>
<p><a href="https://en.wikipedia.org/wiki/Shared_memory">shared memory</a><sup class="footnote">[<a id="_footnoteref_7" class="footnote" href="#_footnote_7" title="View footnote.">7</a>]</sup></p>
</li>
<li>
<p><a href="http://aries.apache.org/">Apache Aries</a><sup class="footnote">[<a id="_footnoteref_8" class="footnote" href="#_footnote_8" title="View footnote.">8</a>]</sup> for pluggable transports</p>
</li>
<li>
<p>no transport at all (method calls are fine for a given use case)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>It is the Chronicle Queue we will be looking at in the post.</p>
</div>
</div>
<div class="sect2">
<h3 id="_using_queue_in_a_unit_test">Using queue in a unit test</h3>
<div class="paragraph">
<p>Chronicle Queue is persisted, however in unit tests you usually want to start fresh and remove the queue afterwards.  The <strong>idiom</strong> you can use is as follows;</p>
</div>
<div class="listingblock">
<div class="title">Creating a temporary Queue</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">File queuePath = new File(OS.TARGET, "testName-" + System.nanoTime());
try {
    try (SingleChronicleQueue queue = SingleChronicleQueueBuilder.binary(queuePath).build()) {
        // use the queue
    }

} finally {
    IOTools.shallowDeleteDirWithFiles(queuePath);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>This creates a queue which is stored in a single file.  The file is rolled daily by default and includes the current date in the path.</p>
</div>
<div class="sect3">
<h4 id="_writing_events">Writing events</h4>
<div class="paragraph">
<p>If we repeat our test as before, instead of using a <strong>mock listener</strong>, we can use a listener which writes each method called to a queue:</p>
</div>
<div class="listingblock">
<div class="title">Write methods called to a queue for either interface</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">OrderIdeaListener orderManager = queue.createAppender()
                                      .methodWriter(OrderIdeaListener.class, MarketDataListener.class);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Our combiner writes to this queue, as does our test:</p>
</div>
<div class="listingblock">
<div class="title">The SidedPrice combiner</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">SidedMarketDataCombiner combiner = new SidedMarketDataCombiner((MarketDataListener) orderManager);</code></pre>
</div>
</div>
<div class="paragraph">
<p>We can also repeat the events inbound.  Putting all this together we get:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">try (SingleChronicleQueue queue = SingleChronicleQueueBuilder.binary(queuePath).build()) {
    OrderIdeaListener orderManager = queue.createAppender().methodWriter(OrderIdeaListener.class, MarketDataListener.class);
    SidedMarketDataCombiner combiner = new SidedMarketDataCombiner((MarketDataListener) orderManager);

    // events in
    orderManager.onOrderIdea(new OrderIdea("EURUSD", Side.Buy, 1.1180, 2e6)); // not expected to trigger

    combiner.onSidedPrice(new SidedPrice("EURUSD", 123456789000L, Side.Sell, 1.1172, 2e6));
    combiner.onSidedPrice(new SidedPrice("EURUSD", 123456789100L, Side.Buy, 1.1160, 2e6));

    combiner.onSidedPrice(new SidedPrice("EURUSD", 123456789100L, Side.Buy, 1.1167, 2e6));

    orderManager.onOrderIdea(new OrderIdea("EURUSD", Side.Buy, 1.1165, 1e6)); // expected to trigger
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Once we have written all the events to our queue, we can process the queue in our test. A more realistic example would be to run these two components in different threads, processes or on different machines, however this just complicates the tests and the result should be the same provided the transport does it&#8217;s job.</p>
</div>
</div>
<div class="sect3">
<h4 id="_reading_events">Reading events.</h4>
<div class="paragraph">
<p>When we read the events we need a component which implements the methods called above and a mock listener to ensure it triggers the right events.</p>
</div>
<div class="listingblock">
<div class="title">Read all the events and check the right output</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">// what we expect to happen
OrderListener listener = createMock(OrderListener.class);
listener.onOrder(new Order("EURUSD", Side.Buy, 1.1167, 1_000_000));
replay(listener);

try (SingleChronicleQueue queue = SingleChronicleQueueBuilder.binary(queuePath).build()) {
    // build our scenario
    OrderManager orderManager = new OrderManager(listener); <i class="conum" data-value="1"></i><b>(1)</b>
    MethodReader reader = queue.createTailer().methodReader(orderManager); <i class="conum" data-value="2"></i><b>(2)</b>
    for (int i = 0; i &lt; 5; i++)
        assertTrue(reader.readOne()); <i class="conum" data-value="3"></i><b>(3)</b>

    assertFalse(reader.readOne()); <i class="conum" data-value="4"></i><b>(4)</b>
    System.out.println(queue.dump()); <i class="conum" data-value="5"></i><b>(5)</b>
}

verify(listener);</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>our component to test</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>our queue reader which will call the methods</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>loop to read/process one method at a time.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>we have no more messages</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>dump the queue contents so we can see what the input was.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Finally, the test dumps the raw contents of the queue. This reads the data stored in the file that queue uses.  This dump is only useful for smaller queue with a few MB of data. If you have a few GB, it won&#8217;t be able to be stored in a String.  You can use <a href="https://github.com/OpenHFT/Chronicle-Queue/blob/master/src/main/java/net/openhft/chronicle/queue/DumpQueueMain.java">DumpQueueMain</a> f</p>
</div>
<div class="listingblock">
<div class="title">The output of dump()</div>
<div class="content">
<pre class="highlight"><code class="language-yaml" data-lang="yaml">--- !!meta-data #binary
header: !SCQStore {
  wireType: !WireType BINARY,
  writePosition: 777,
  roll: !SCQSRoll {
    length: 86400000,
    format: yyyyMMdd,
    epoch: 0
    },
  indexing: !SCQSIndexing {
    indexCount: !int 8192,
    indexSpacing: 64,
    index2Index: 0,
    lastIndex: 0
    }
}
# position: 227
--- !!data #binary
onOrderIdea: {
  symbol: EURUSD,
  side: Buy,
  limitPrice: 1.118,
  quantity: 2000000.0
}
# position: 306
--- !!data #binary
onTopOfBookPrice: {
  symbol: EURUSD,
  timestamp: 123456789000,
  buyPrice: NaN,
  buyQuantity: 0,
  sellPrice: 1.1172,
  sellQuantity: 2000000.0
}
# position: 434
--- !!data #binary
onTopOfBookPrice: {
  symbol: EURUSD,
  timestamp: 123456789100,
  buyPrice: 1.116,
  buyQuantity: 2000000.0,
  sellPrice: 1.1172,
  sellQuantity: 2000000.0
}
# position: 566
--- !!data #binary
onTopOfBookPrice: {
  symbol: EURUSD,
  timestamp: 123456789100,
  buyPrice: 1.1167,
  buyQuantity: 2000000.0,
  sellPrice: 1.1172,
  sellQuantity: 2000000.0
}
# position: 698
--- !!data #binary
onOrderIdea: {
  symbol: EURUSD,
  side: Buy,
  limitPrice: 1.1165,
  quantity: 1000000.0
}
...
# 83885299 bytes remaining</code></pre>
</div>
</div>
<div class="paragraph">
<p>To run the test and dump the queue in my IDE took 233 ms.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We can test components stand alone with a queue or in a chain by using more queues. More importantly we can test our components without the infrastructure complicating the debugging process.  When our components work without a transport, we can show they do the same thing with a transport.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_in_our_next_part">In our next part</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://vanilla-java.github.io/2016/03/26/Microservices-in-the-Chronicle-World-Part-3.html">In part 3, we will look at benchmarking and profiling with Queue</a>.  While Queue is designed to be simple and transparent, it is also designed to be faster than other persisted transports, even with no tuning.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_glossary">Glossary</h2>
<div class="sectionbody">
<div class="paragraph">
<p><strong>Idiom</strong>- "A means of expressing a recurring construct in one or more programming languages."<sup class="footnote">[<a id="_footnoteref_9" class="footnote" href="#_footnote_9" title="View footnote.">9</a>]</sup></p>
</div>
<div class="paragraph">
<p><strong>Mock listener</strong>- Method call/messages can be sent to a mock listener. This acts as a pretend Object for the purposes of testing in order to see that would happen to a Concrete Object.</p>
</div>
<div class="paragraph">
<p><strong>Service</strong>- A program that is available to other programs to run and make use of.</p>
</div>
<div class="paragraph">
<p><strong>Transport</strong>- A program or hardware that takes data from ome process to another.e.g <a href="http://www.webopedia.com/TERM/M/middleware.html">Middleware</a><sup class="footnote">[<a id="_footnoteref_10" class="footnote" href="#_footnote_10" title="View footnote.">10</a>]</sup>// = Your Blog title</p>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. Beal, V. (2016). What is asynchronous messaging? Webopedia Definition. Online. Webopedia.com. Available at: <a href="http://www.webopedia.com/TERM/A/asynchronous_messaging.html" class="bare">http://www.webopedia.com/TERM/A/asynchronous_messaging.html</a>. Accessed Jul. 2016
</div>
<div class="footnote" id="_footnote_2">
<a href="#_footnoteref_2">2</a>. Netty.io. (2016). Netty: Home. Online. Available at: <a href="http://netty.io/" class="bare">http://netty.io/</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_3">
<a href="#_footnoteref_3">3</a>. Oracle (2013). The JMS API Programming Model - The Java EE 6 Tutorial. Online. Available at: <a href="https://docs.oracle.com/javaee/6/tutorial/doc/bnceh.html" class="bare">https://docs.oracle.com/javaee/6/tutorial/doc/bnceh.html</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_4">
<a href="#_footnoteref_4">4</a>. Wikipedia. (2016). Java API for RESTful Web Services. Online. Available at: <a href="https://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services" class="bare">https://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services</a>. Accessed  Mar. 2016
</div>
<div class="footnote" id="_footnote_5">
<a href="#_footnoteref_5">5</a>. Docs.oracle.c(2016). Java JDBC API. Online. Available at: <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/" class="bare">https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_6">
<a href="#_footnoteref_6">6</a>. Oracle (2016). WatchService (Java Platform SE 8 ). Online. Available at: <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/WatchService.html.Accessed" class="bare">https://docs.oracle.com/javase/8/docs/api/java/nio/file/WatchService.html.Accessed</a> 23 Mar. 2016
</div>
<div class="footnote" id="_footnote_7">
<a href="#_footnoteref_7">7</a>. Oracle (2016). BlockingQueue (Java Platform SE 8 ). Online. Available at: <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html" class="bare">https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html</a> Accessed 23 Mar. 2016
</div>
<div class="footnote" id="_footnote_8">
<a href="#_footnoteref_8">8</a>. Apache Aries. (2016). Apache Aries - Index. Online. Available at: <a href="http://aries.apache.org/" class="bare">http://aries.apache.org/</a>. Accessed 23 Mar. 2016
</div>
<div class="footnote" id="_footnote_9">
<a href="#_footnoteref_9">9</a>. Wikipedia. (2016). Programming idiom. Online. Available at: <a href="https://en.wikipedia.org/wiki/Programming_idiom" class="bare">https://en.wikipedia.org/wiki/Programming_idiom</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_10">
<a href="#_footnoteref_10">10</a>. Beal, V. (2016). What is Middleware? Webopedia Definition. Online. Webopedia.com. Available at: <a href="http://www.webopedia.com/TERM/M/middleware.html" class="bare">http://www.webopedia.com/TERM/M/middleware.html</a>. Accessed Jul. 2016
</div>
</div>]]></description><link>https://vanilla-java.github.io/2016/03/24/Microservices-in-the-Chronicle-world-Part-2.html</link><guid isPermaLink="true">https://vanilla-java.github.io/2016/03/24/Microservices-in-the-Chronicle-world-Part-2.html</guid><category><![CDATA[Microservices]]></category><category><![CDATA[Chronicle-Queue]]></category><dc:creator><![CDATA[Peter Lawrey]]></dc:creator><pubDate>Thu, 24 Mar 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Microservices in the Chronicle world - Part 1]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>At a high level, different <strong>Microservice</strong> strategies have a lot in common.  They subscribe to the same ideals.
When it comes to the details of how they are actually implemented, they can vary.</p>
</div>
<div class="paragraph">
<p>Microservices in the Chronicle world are designed around:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Simplicity- simple is fast, flexable and easier to maintain.</p>
</li>
<li>
<p>Transparency- you can&#8217;t control what you don&#8217;t understand.</p>
</li>
<li>
<p>Reproduceablity- this must be in your design to ensure a quality solution.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_what_do_we_mean_by_simple">What do we mean by simple?</h3>
<div class="paragraph">
<p>A key part of the microservices design is how messages are passed between services/components. The simplest messages could be called <em>asynchronous method calls</em>.</p>
</div>
<div class="paragraph">
<p>An asynchronous method call is one which;</p>
</div>
<div class="ulist">
<ul>
<li>
<p>doesn&#8217;t return anything,</p>
</li>
<li>
<p>doesn&#8217;t alter it&#8217;s arguments;</p>
</li>
<li>
<p>doesn&#8217;t throw any exceptions (although the underlying transport could).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The reason this approach is used, is that the simplest transport is no transport at all.  One component calls another.  This is not only fast ( and with inlining might not take any time at all), but it is simple to setup, debug and profile.  For most unit tests you don&#8217;t need a real transport so there is no advantage in making the test more complicated than it needs to be.</p>
</div>
</div>
<div class="sect2">
<h3 id="_let_s_look_at_an_example">Let&#8217;s look at an example.</h3>
<div class="paragraph">
<p>Say we have a service/component which is taking incremental market data updates. In the simplest case, this could be a market update with only one side, a buy or a sell.  The component could transform this into a full market update combining both the buy and sell price and quantity.</p>
</div>
<div class="paragraph">
<p>In this example, we have only one message type to start with, however we can add more message types. I suggest you create a different message name/method for each message rather than overloading a method.</p>
</div>
<div class="listingblock">
<div class="title">Our inbound data structure</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class SidedPrice extends AbstractMarshallable {
    final String symbol;
    final long timestamp;
    final Side side;
    final double price, quantity;

    public SidedPrice(String symbol, long timestamp, Side side, double price, double quantity) {
        this.symbol = symbol;
        this.timestamp = timestamp;
        this.side = side;
        this.price = price;
        this.quantity = quantity;
    }
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Our outbound data structure</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class TopOfBookPrice extends AbstractMarshallable {
    final String symbol;
    final long timestamp;
    final double buyPrice, buyQuantity;
    final double sellPrice, sellQuantity;

    public TopOfBookPrice(String symbol, long timestamp, double buyPrice, double buyQuantity, double sellPrice, double sellQuantity) {
        this.symbol = symbol;
        this.timestamp = timestamp;
        this.buyPrice = buyPrice;
        this.buyQuantity = buyQuantity;
        this.sellPrice = sellPrice;
        this.sellQuantity = sellQuantity;
    }

    // more methods <i class="conum" data-value="1"></i><b>(1)</b>
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>For the complete code <a href="https://github.com/Vanilla-Java/Microservices/blob/master/src/main/java/net/openhft/samples/microservices/orders/TopOfBookPrice.java">TopOfBookPrice.java</a>.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The component which takes one sided prices could have an interface;</p>
</div>
<div class="listingblock">
<div class="title">Inbound interface for the first component</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public interface SidedMarketDataListener {
    void onSidedPrice(SidedPrice sidedPrice);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>and it&#8217;s output also has one method;</p>
</div>
<div class="listingblock">
<div class="title">Outbound interface for the first component</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public interface MarketDataListener {
    void onTopOfBookPrice(TopOfBookPrice price);
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_what_does_our_microservice_look_like">What does our microservice look like?</h3>
<div class="paragraph">
<p>At a high level, the combiner is very simple;</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class SidedMarketDataCombiner implements SidedMarketDataListener {
    final MarketDataListener mdListener;
    final Map&lt;String, TopOfBookPrice&gt; priceMap = new TreeMap&lt;&gt;();

    public SidedMarketDataCombiner(MarketDataListener mdListener) {
        this.mdListener = mdListener;
    }

    public void onSidedPrice(SidedPrice sidedPrice) {
        TopOfBookPrice price = priceMap.computeIfAbsent(sidedPrice.symbol, TopOfBookPrice::new);
        if (price.combine(sidedPrice))
            mdListener.onTopOfBookPrice(price);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>It implements our input interface and takes the output interface as a listener.</p>
</div>
</div>
<div class="sect2">
<h3 id="_what_does_abstractmarshallable_provide">What does AbstractMarshallable provide?</h3>
<div class="paragraph">
<p>The <a href="https://github.com/OpenHFT/Chronicle-Wire/blob/master/src/main/java/net/openhft/chronicle/wire/AbstractMarshallable.java">AbstractMarshallable</a> class is a convenience class which implements <code>toString()</code>, <code>equals(Object)</code> and <code>hashCode()</code>. It also supports Marshallable&#8217;s <code>writeMarshallable(WireOut)</code> and <code>readMarshallable(WireIn)</code>.</p>
</div>
<div class="paragraph">
<p>The default implementations use all the non-static non-transient fields to either print, compare or build a hashCode.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
the resulting toString() can always be <strong>de-serialized</strong> with <code>Marshallable.fromString(CharSequence)</code>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Let&#8217;s look at a couple of examples.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">SidedPrice sp = new SidedPrice("Symbol", 123456789000L, Side.Buy, 1.2345, 1_000_000);
assertEquals("!SidedPrice {\n" +
        "  symbol: Symbol,\n" +
        "  timestamp: 123456789000,\n" +
        "  side: Buy,\n" +
        "  price: 1.2345,\n" +
        "  quantity: 1000000.0\n" +
        "}\n", sp.toString());

// from string
SidedPrice sp2 = Marshallable.fromString(sp.toString());
assertEquals(sp2, sp);
assertEquals(sp2.hashCode(), sp.hashCode());</code></pre>
</div>
</div>
<div class="paragraph">
<p>As you can see, the <code>toString()</code> is in <a href="http://www.yaml.org/spec/1.2/spec.html">YAML</a><sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup>, concise, readable to a human and in code.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">TopOfBookPrice tobp = new TopOfBookPrice("Symbol", 123456789000L, 1.2345, 1_000_000, 1.235, 2_000_000);
assertEquals("!TopOfBookPrice {\n" +
        "  symbol: Symbol,\n" +
        "  timestamp: 123456789000,\n" +
        "  buyPrice: 1.2345,\n" +
        "  buyQuantity: 1000000.0,\n" +
        "  sellPrice: 1.235,\n" +
        "  sellQuantity: 2000000.0\n" +
        "}\n", tobp.toString());

// from string
TopOfBookPrice topb2 = Marshallable.fromString(tobp.toString());
assertEquals(topb2, tobp);
assertEquals(topb2.hashCode(), tobp.hashCode());
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>One of the advantages of using this format is that it makes it easier to find the reason for a failing test even in complex objects.</p>
</div>
<div class="listingblock">
<div class="title">Even in a trivial test it&#8217;s not obvious what the problem is</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">TopOfBookPrice tobp = new TopOfBookPrice("Symbol", 123456789000L, 1.2345, 1_000_000, 1.235, 2_000_000);
TopOfBookPrice tobp2 = new TopOfBookPrice("Symbol", 123456789000L, 1.2345, 1_000_000, 1.236, 2_000_000);

assertEquals(tobp, tobp2);</code></pre>
</div>
</div>
<div class="paragraph">
<p>However when you run this test in your  <a href="https://en.wikipedia.org/wiki/Integrated_development_environment">IDE</a><sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote.">2</a>]</sup>, you get a comparison window.</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="https://vanilla-java.github.io/images/TopOfBookPrice-comparison.png" alt="Top Of Book Price comparison" width="720">
</div>
<div class="title">Figure 1. Comparison Windows in your IDE</div>
</div>
<div class="paragraph">
<p>If you have a large nested/complex object where <code>assertEquals</code> fails, it can really save you a lot of time finding what the discrepency is.</p>
</div>
</div>
<div class="sect2">
<h3 id="_mocking_our_component">Mocking our component</h3>
<div class="paragraph">
<p>We can mock an interface using a tool like <a href="http://easymock.org/">EasyMock</a>. I find EasyMock is simpler when dealing with event driven interfaces. It is not as powerful as PowerMock or Mockito, however if you are keeping things simple, you might not need those features.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">// what we expect to happen
SidedPrice sp = new SidedPrice("Symbol", 123456789000L, Side.Buy, 1.2345, 1_000_000);
SidedMarketDataListener listener = createMock(SidedMarketDataListener.class);
listener.onSidedPrice(sp);
replay(listener);

// what happens
listener.onSidedPrice(sp);

// verify we got everything we expected.
verify(listener);</code></pre>
</div>
</div>
<div class="paragraph">
<p>We can also mock the expected output of a component the same way.</p>
</div>
</div>
<div class="sect2">
<h3 id="_testing_our_component">Testing our component</h3>
<div class="paragraph">
<p>By mocking the output interface and calling the input interface for our compoonent we can check it behaves as expected.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">MarketDataListener listener = createMock(MarketDataListener.class);
listener.onTopOfBookPrice(new TopOfBookPrice("EURUSD", 123456789000L, 1.1167, 1_000_000, Double.NaN, 0)); <i class="conum" data-value="1"></i><b>(1)</b>
listener.onTopOfBookPrice(new TopOfBookPrice("EURUSD", 123456789100L, 1.1167, 1_000_000, 1.1172, 2_000_000)); <i class="conum" data-value="2"></i><b>(2)</b>
replay(listener);

SidedMarketDataListener combiner = new SidedMarketDataCombiner(listener);
combiner.onSidedPrice(new SidedPrice("EURUSD", 123456789000L, Side.Buy, 1.1167, 1e6)); <i class="conum" data-value="1"></i><b>(1)</b>
combiner.onSidedPrice(new SidedPrice("EURUSD", 123456789100L, Side.Sell, 1.1172, 2e6)); <i class="conum" data-value="2"></i><b>(2)</b>

verify(listener);</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Setting the buy price</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Setting the sell price</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_testing_a_series_of_components">Testing a series of components</h3>
<div class="paragraph">
<p>Lets add an OrderManager as a down stream component. This order manager will receive both market data updates and order ideas, and in turn will produce orders.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">// what we expect to happen
OrderListener listener = createMock(OrderListener.class);
listener.onOrder(new Order("EURUSD", Side.Buy, 1.1167, 1_000_000));
replay(listener);

// build our scenario
OrderManager orderManager = new OrderManager(listener); <i class="conum" data-value="2"></i><b>(2)</b>
SidedMarketDataCombiner combiner = new SidedMarketDataCombiner(orderManager); <i class="conum" data-value="1"></i><b>(1)</b>

// events in
orderManager.onOrderIdea(new OrderIdea("EURUSD", Side.Buy, 1.1180, 2e6)); // not expected to trigger

combiner.onSidedPrice(new SidedPrice("EURUSD", 123456789000L, Side.Sell, 1.1172, 2e6));
combiner.onSidedPrice(new SidedPrice("EURUSD", 123456789100L, Side.Buy, 1.1160, 2e6));

combiner.onSidedPrice(new SidedPrice("EURUSD", 123456789100L, Side.Buy, 1.1167, 2e6));

orderManager.onOrderIdea(new OrderIdea("EURUSD", Side.Buy, 1.1165, 1e6)); // expected to trigger

verify(listener);</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The first component combines sided prices</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The second component listens to order ideas and top of book market data</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_debugging_our_components">Debugging our components</h3>
<div class="paragraph">
<p>You can see that one component just calls another. When debugging this single threaded code, each event from the first component is a call to the second component. When that finishes it returns to the first one and the tests.</p>
</div>
<div class="paragraph">
<p>When any individual event triggers an error, you can see in the <strong>stack trace</strong> which event caused the issue. However, if you are expecting an event which doesn&#8217;t happen, this is tricker unless your tests are simple (or you do a series of simple tests with <code>verify()</code>, <code>reset()</code> and <code>replay()</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
it takes almost no time at all to start up the test and debug it in your IDE.  You can run hundreds of tests like this in less than a second.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_source_for_examples">Source for examples</h3>
<div class="paragraph">
<p><a href="https://github.com/Vanilla-Java/Microservices/tree/master/src/main/java/net/openhft/samples/microservices" class="bare">https://github.com/Vanilla-Java/Microservices/tree/master/src/main/java/net/openhft/samples/microservices</a></p>
</div>
</div>
<div class="sect1">
<h2 id="_how_do_we_create_these_as_services">How do we create these as services?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We have shown how easy it is to test and debug our components. <a href="https://vanilla-java.github.io/2016/03/24/Microservices-in-the-Chronicle-world-Part-2.html">How do we turn these into services in Part 2</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_glossary">Glossary</h2>
<div class="sectionbody">
<div class="paragraph">
<p><strong>Microservices</strong>- Independantly deployable programmes that act as components in a larger network.</p>
</div>
<div class="paragraph">
<p><strong>Serialization</strong>- <a href="https://en.wikipedia.org/wiki/Serialization">"The process of translating data structures or object state into a format that can be stored"</a><sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnote_3" title="View footnote.">3</a>]</sup><em>See also</em> <strong>Serialization libraries</strong>- The process that translates data into a format that can be consumed by another system.</p>
</div>
<div class="paragraph">
<p><strong>Stack trace</strong>- "A report of the active <a href="http://stackoverflow.com/questions/10057443/explain-the-concept-of-a-stack-frame-in-a-nutshell">stack frames</a> at a certain point in time during the execution of a program."  <sup class="footnote">[<a id="_footnoteref_4" class="footnote" href="#_footnote_4" title="View footnote.">4</a>]</sup> // = Your Blog title</p>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. Ben-Kiki, et al (2009). YAML Ain’t Markup Language (YAML™) Version 1.2. Online. Available at: <a href="http://www.yaml.org/spec/1.2/spec.html" class="bare">http://www.yaml.org/spec/1.2/spec.html</a>. Accessed Jul. 2016
</div>
<div class="footnote" id="_footnote_2">
<a href="#_footnoteref_2">2</a>. Wikipedia. (2016). Integrated development environment. Online. Available at: <a href="https://en.wikipedia.org/wiki/Integrated_development_environment" class="bare">https://en.wikipedia.org/wiki/Integrated_development_environment</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_3">
<a href="#_footnoteref_3">3</a>. Wikipedia. (2016). Serialization. Online. Available at: <a href="https://en.wikipedia.org/wiki/Serialization" class="bare">https://en.wikipedia.org/wiki/Serialization</a>. Accessed Jul. 2016.
</div>
<div class="footnote" id="_footnote_4">
<a href="#_footnoteref_4">4</a>. Wikipedia. (2016). Stack trace. Online. Available at: <a href="https://en.wikipedia.org/wiki/Stack_trace" class="bare">https://en.wikipedia.org/wiki/Stack_trace</a>. Accessed Jul. 2016
</div>
</div>]]></description><link>https://vanilla-java.github.io/2016/03/23/Microservices-in-the-Chronicle-world-Part-1.html</link><guid isPermaLink="true">https://vanilla-java.github.io/2016/03/23/Microservices-in-the-Chronicle-world-Part-1.html</guid><category><![CDATA[Microservices]]></category><category><![CDATA[examples]]></category><dc:creator><![CDATA[Peter Lawrey]]></dc:creator><pubDate>Wed, 23 Mar 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Micro-services for performance]]></title><description><![CDATA[<div class="sect1">
<h2 id="_overview">Overview</h2>
<div class="sectionbody">
<div class="paragraph">
<p><strong>Microservices</strong> is a buzz word at the moment. Is it really something original or based on established best practices? There are some disadvantages to the way microservices have been implemented, but can these be solved?</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_component_testability_and_consistency">Component testability and consistency</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Once you have assembled a large system, it can be hard or even impossible to profile where the highest delays come from. You can profile for average <strong>latency</strong> or <strong>throughput</strong>, but to achieve consistent latencies, you need to analyse key portions of your system.  This is where having simple components which run independently, and can be tested as stand alone, could help you achieve the consistency of your system needs end to end.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_the_unix_philosophy">The UNIX Philosophy</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Many of the key concepts of microservices have been used in distributed systems for many years.</p>
</div>
<div class="paragraph">
<p>Microservices have much in common with the  <a href="https://en.wikipedia.org/wiki/Unix_philosophy">Unix Philosophy</a><sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup></p>
</div>
<div class="paragraph">
<p><a href="https://en.wikipedia.org/wiki/Unix_philosophy#Mike_Gancarz:_The_UNIX_Philosophy">Mike Gancarz</a><sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote.">2</a>]</sup> is quoted as summed these principles as follows:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="ulist">
<ul>
<li>
<p>Small is beautiful.</p>
</li>
<li>
<p>Make each program do one thing well.</p>
</li>
<li>
<p>Build a prototype as soon as possible.</p>
</li>
<li>
<p>Choose portability over efficiency.</p>
</li>
<li>
<p>Store data in flat text files.</p>
</li>
<li>
<p>Use software leverage to your advantage.</p>
</li>
<li>
<p>Use <a href="https://en.wikipedia.org/wiki/Shell_script">shell scripts</a><sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnote_3" title="View footnote.">3</a>]</sup> to increase leverage and portability.</p>
</li>
<li>
<p>Avoid captive user interfaces.</p>
</li>
<li>
<p>Make every program a filter.</p>
</li>
</ul>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>The <a href="https://en.wikipedia.org/wiki/Microservices#Philosophy">Microservices Architecture</a><sup class="footnote">[<a id="_footnoteref_4" class="footnote" href="#_footnote_4" title="View footnote.">4</a>]</sup> is the UNIX Philosophy applied to <strong>distributed systems</strong>.</p>
</div>
<div class="paragraph">
<p>Philosophy of microservices architecture essentially equals the Unix philosophy of "Do one thing and do it well". It is described as follows:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="ulist">
<ul>
<li>
<p>The services are small - fine-grained to perform a single function.</p>
</li>
<li>
<p>The organization culture should embrace automation of deployment and testing. This eases the burden on management and operations.</p>
</li>
<li>
<p>The culture and design principles should embrace failure and faults, similar to anti-fragile systems.</p>
</li>
<li>
<p>Each service is elastic, resilient, composable, minimal, and complete.</p>
</li>
</ul>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>There are <a href="https://en.wikipedia.org/wiki/Microservices#Criticism">disadvantages</a><sup class="footnote">[<a id="_footnoteref_5" class="footnote" href="#_footnote_5" title="View footnote.">5</a>]</sup> to using a microservices archictecture some of which are;</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="ulist">
<ul>
<li>
<p>Services form information <a href="https://en.wikipedia.org/wiki/Barrier_(computer_science)">barriers</a><sup class="footnote">[<a id="_footnoteref_6" class="footnote" href="#_footnote_6" title="View footnote.">6</a>]</sup>.</p>
</li>
<li>
<p>The architecture introduces additional complexity and new problems to deal with, such as network latency, <a href="http://networking.xtreemhost.com/wp/?p=279&amp;ckattempt=1">message formats</a><sup class="footnote">[<a id="_footnoteref_7" class="footnote" href="#_footnote_7" title="View footnote.">7</a>]</sup>,
<a href="http://searchnetworking.techtarget.com/definition/load-balancing">load balancing</a> <sup class="footnote">[<a id="_footnoteref_8" class="footnote" href="#_footnote_8" title="View footnote.">8</a>]</sup> and
<a href="http://searchdisasterrecovery.techtarget.com/definition/fault-tolerant">fault tolerance</a><sup class="footnote">[<a id="_footnoteref_9" class="footnote" href="#_footnote_9" title="View footnote.">9</a>]</sup>. Ignoring one of these belongs to the "fallacies of distributed computing".</p>
</li>
<li>
<p>Testing and deployment are more complicated.</p>
</li>
<li>
<p>The complexity of a <a href="https://en.wikipedia.org/wiki/Monolithic_application">monolithic application</a><sup class="footnote">[<a id="_footnoteref_10" class="footnote" href="#_footnote_10" title="View footnote.">10</a>]</sup> is only shifted into the network, but persists.</p>
</li>
<li>
<p>Too-fine-grained microservices have been criticized as an anti-pattern.</p>
</li>
</ul>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>Can we get the best features of a monolith, and micro-services? Does it have to be one or the other?  Should we not use the approach which best suits our problem.  One of the key aspects of Micro-services is controlled deployment of an application. In which case, shouldn&#8217;t we be able to deploy components as a Monolith or Micro-services where it makes the most sense to do so.</p>
</div>
<div class="paragraph">
<p>Proposed alternatives to nanoservices include;</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="ulist">
<ul>
<li>
<p>Package the functionality as a <strong>library</strong>, rather than a service.</p>
</li>
<li>
<p>Combine the functionality with other functionalities, producing a more substantial, useful service.</p>
</li>
<li>
<p>Refactor the system, putting the functionality in other services or redesigning the system.</p>
</li>
</ul>
</div>
</blockquote>
</div>
</div>
</div>
<h1 id="_how_can_we_get_the_best_of_both_worlds" class="sect0">How can we get the best of both worlds?</h1>
<div class="sect1">
<h2 id="_make_sure_your_components_are_composable">Make sure your components are composable.</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If your components are composable, then they are always the right size.  You can combine them as needed into a collection of services, or everything into one service.</p>
</div>
<div class="paragraph">
<p>This is particularly important for testing and <strong>debugging</strong>.  You need to know a group of business components work together without the infrastructure (eg. Middleware) getting in the way.  For the purposes of a unit test, you may want to run all your components in one thread and have one directly call the other.  This can be no more complicated than testing components of a monolith where you can step through your code from one component to another and see exactly what is happening.</p>
</div>
<div class="paragraph">
<p>Only once your components work together correctly without infrastructure, do you need to test how they behave with infrastructure.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_make_your_infrastructure_as_fast_as_your_application_needs">Make your infrastructure as fast as your application needs.</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Low latency trading systems are distributed systems, and yet they also have very stringent latency requirements.  Most trading systems are designed to care about latencies much faster than you can see.  In the Java space, it is not unusual to see a trading system which needs to have latencies below 100 micro-seconds, 99% of the time or even 99.9% of the time.  This can be achieved using commodity hardware in a high level language like Java.</p>
</div>
<div class="paragraph">
<p>The keys to achieving low latencies are;</p>
</div>
<div class="ulist">
<ul>
<li>
<p>low latency infrastructure for messaging and logging. Ideally around a 1 micro-second for short messages,</p>
</li>
<li>
<p>a minimum of network hops,</p>
</li>
<li>
<p>a high level of reproduceability of real production load so you can study the 99%tile (worst 1 %) or 99.9%tile (worst 0.1%) latencies,</p>
</li>
<li>
<p>viewing each <strong>CPU core</strong> as having a specific task/service, with it&#8217;s own CPU cache data and code. The focus is on the distribution of your application between cores (rather than between computers).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Your L2 cache coherence bus is your messaging layer between high performance services.</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="http://slideplayer.com/slide/3348635/"><img src="https://vanilla-java.github.io/images/L2-Cache-Coherence-small.jpg" alt="L2 Cache" width="230"></a>
</div>
</div>
<div class="paragraph">
<p>You can perform a CAS operation on the same data between two different cores. Here, each thread toggles the value set by the other thread with a round trip time of less than 50 nano-seconds on <a href="http://ark.intel.com/products/codename/29900/Sandy-Bridge#@All">Sandy Bridge processors</a><sup class="footnote">[<a id="_footnoteref_11" class="footnote" href="#_footnote_11" title="View footnote.">11</a>]</sup>, less on newer generations.</p>
</div>
<div class="paragraph">
<p>Examples of low latency instructure in Java are;</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/real-logic/Aeron">Aeron</a><sup class="footnote">[<a id="_footnoteref_12" class="footnote" href="#_footnote_12" title="View footnote.">12</a>]</sup> - A reliable UDP transport,</p>
</li>
<li>
<p><a href="https://github.com/OpenHFT/Chronicle-Queue">Chronicle Queue</a> - A persisted queue for messaging and logging.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>These transports have different advantages in terms of handling load balancing and <strong>failover</strong>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_make_the_message_format_a_configuration_consideration">Make the message format a configuration consideration.</h2>
<div class="sectionbody">
<div class="paragraph">
<p>There is a number of competing concerns in message formats. You want;</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Human readability so you can validate the messages are not only behaving correctly, but doing so in the manner you expect. I am often surprised how many issues I find by dumping a storage file or the message logs.</p>
</li>
<li>
<p>Machine friendly binary format for speed.</p>
</li>
<li>
<p>Flexability in terms of future schema changes. Flexability means adding redundancy so the software can cope with adding/removing fields and changing their data types in future. This redundancy is a waste if you don&#8217;t need it.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Ideally, you can choose the best option at testing/deployment time.</p>
</div>
<div class="paragraph">
<p>Some examples of <strong>serialization libraries</strong> where you can change the actual <strong>wire format</strong> to suit your needs are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/FasterXML/jackson-core">Jackson Speaming API</a><sup class="footnote">[<a id="_footnoteref_13" class="footnote" href="#_footnote_13" title="View footnote.">13</a>]</sup> - Which supports JSON, XML, CSV, CBOR (a binary format),</p>
</li>
<li>
<p><a href="https://github.com/OpenHFT/Chronicle-Wire">Chronicle Wire</a> - Which supports object serialization YAML, a number of different forms of Binary YAML, JSON, CSV, Raw data.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>What I found useful in <a href="http://www.yaml.org/spec/1.2/spec.html">YAML</a><sup class="footnote">[<a id="_footnoteref_14" class="footnote" href="#_footnote_14" title="View footnote.">14</a>]</sup> verses JSON, is the cleaner syntax which is designed to be human readable, rather than the subset of another language, the natural support for data types, comments, binary content and message seperators.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I think there is a lot of good ideas on how to use microservices, and I think many of the criticisms around them are based on how they have been implemented and I believe they are solvable.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_glossary">Glossary</h2>
<div class="sectionbody">
<div class="paragraph">
<p><strong>CPU core</strong>- <a href="http://www.makeuseof.com/tag/processor-core-makeuseof-explains-2/">"A processor core is a processing unit which reads in instructions to perform specific actions."</a><sup class="footnote">[<a id="_footnoteref_15" class="footnote" href="#_footnote_15" title="View footnote.">15</a>]</sup></p>
</div>
<div class="paragraph">
<p><strong>Debugging</strong>- the process of searching for and fixing defects in code.</p>
</div>
<div class="paragraph">
<p><strong>Distributed System</strong>- A collection of autonomous computers linked in a network by <a href="https://en.wikipedia.org/wiki/Middleware">middleware</a><sup class="footnote">[<a id="_footnoteref_16" class="footnote" href="#_footnote_16" title="View footnote.">16</a>]</sup>. A test can be distributed between a number of systems.</p>
</div>
<div class="paragraph">
<p><strong>Failover</strong>- <a href="http://www.webopedia.com/TERM/F/failover.html">"A backup operation that automatically switches to a standby server or network if the primary system fails or is temporarily shut down for servicing."</a><sup class="footnote">[<a id="_footnoteref_17" class="footnote" href="#_footnote_17" title="View footnote.">17</a>]</sup></p>
</div>
<div class="paragraph">
<p><strong>Latency</strong>- The time an individual operation takes. <a href="http://www.webopedia.com/TERM/L/latency.html">"Together, latency and bandwidth define the speed and capacity of a network."</a><sup class="footnote">[<a id="_footnoteref_18" class="footnote" href="#_footnote_18" title="View footnote.">18</a>]</sup></p>
</div>
<div class="paragraph">
<p><strong>Library</strong>- <a href="http://www.webopedia.com/TERM/L/library.html">"A collection of precompiled routines that a program can use."</a><sup class="footnote">[<a id="_footnoteref_19" class="footnote" href="#_footnote_19" title="View footnote.">19</a>]</sup></p>
</div>
<div class="paragraph">
<p><strong>Microservices</strong>- Independantly deployable programmes that act as components in a larger network.</p>
</div>
<div class="paragraph">
<p><strong>Throughput</strong>- The rate of data or messages transferred which is processed in a certain amount of time. This rate is written in terms of throughput, e.g a road could have a throughput of 10 cars per minute.</p>
</div>
<div class="paragraph">
<p><strong>Serialization libraries</strong>- The process that translates data into a format that can be consumed by another system.</p>
</div>
<div class="paragraph">
<p><strong>Wire format</strong>- A defined way for sending data between mechines as bytes.</p>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. Wikipedia. (2016). Unix philosophy. Online. Available at: <a href="https://en.wikipedia.org/wiki/Unix_philosophy" class="bare">https://en.wikipedia.org/wiki/Unix_philosophy</a>. Accessed: Mar. 2016
</div>
<div class="footnote" id="_footnote_2">
<a href="#_footnoteref_2">2</a>. Wikipedia. (2016). Unix philosophy. Online. Available at: <a href="https://en.wikipedia.org/wiki/Unix_philosophy#Mike_Gancarz:_The_UNIX_Philosophy" class="bare">https://en.wikipedia.org/wiki/Unix_philosophy#Mike_Gancarz:_The_UNIX_Philosophy</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_3">
<a href="#_footnoteref_3">3</a>. Wikipedia. (2016). Shell script. Online. Available at: <a href="https://en.wikipedia.org/wiki/Shell_script" class="bare">https://en.wikipedia.org/wiki/Shell_script</a>. Accessed Mar.  2016
</div>
<div class="footnote" id="_footnote_4">
<a href="#_footnoteref_4">4</a>. Wikipedia. (2016). Microservices. Online. Available at: <a href="https://en.wikipedia.org/wiki/Microservices#Philosophy" class="bare">https://en.wikipedia.org/wiki/Microservices#Philosophy</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_5">
<a href="#_footnoteref_5">5</a>. Wikipedia. (2016). Microservices. Online. Available at: <a href="https://en.wikipedia.org/wiki/Microservices#Criticism" class="bare">https://en.wikipedia.org/wiki/Microservices#Criticism</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_6">
<a href="#_footnoteref_6">6</a>. Shirako, J., et al (2008). Phasers. Proceedings of the 22nd annual international conference on Supercomputing - ICS '08. Online. Available at: <a href="https://en.wikipedia.org/wiki/Barrier_(computer_science" class="bare">https://en.wikipedia.org/wiki/Barrier_(computer_science</a>). Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_7">
<a href="#_footnoteref_7">7</a>. Luca, A. (2016). Message Formatting. Online. Available at: <a href="http://networking.xtreemhost.com/wp/?p=279&amp;ckattempt=1" class="bare">http://networking.xtreemhost.com/wp/?p=279&amp;ckattempt=1</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_8">
<a href="#_footnoteref_8">8</a>. Rouse, M. (2016). What is load balancing? - Definition from WhatIs.com. Online. Available at: <a href="http://searchnetworking.techtarget.com/definition/load-balancing" class="bare">http://searchnetworking.techtarget.com/definition/load-balancing</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_9">
<a href="#_footnoteref_9">9</a>. Rouse, M. (2016). What is fault-tolerant? - Definition from WhatIs.com. Online. Available at: <a href="http://searchdisasterrecovery.techtarget.com/definition/fault-tolerant" class="bare">http://searchdisasterrecovery.techtarget.com/definition/fault-tolerant</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_10">
<a href="#_footnoteref_10">10</a>. Wikipedia. (2016). Monolithic application. Online. Available at: <a href="https://en.wikipedia.org/wiki/Monolithic_application" class="bare">https://en.wikipedia.org/wiki/Monolithic_application</a> Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_11">
<a href="#_footnoteref_11">11</a>. Intel® ARK (Product Specs). (2016). Products (Formerly Sandy Bridge). Online. Available at: <a href="http://ark.intel.com/products/codename/29900/Sandy-Bridge#@All" class="bare">http://ark.intel.com/products/codename/29900/Sandy-Bridge#@All</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_12">
<a href="#_footnoteref_12">12</a>. GitHub. (2016). real-logic/Aeron. Online. Available at: <a href="https://github.com/real-logic/Aeron" class="bare">https://github.com/real-logic/Aeron</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_13">
<a href="#_footnoteref_13">13</a>. GitHub. (2016). FasterXML/jackson-core. Online. Available at: <a href="https://github.com/FasterXML/jackson-core" class="bare">https://github.com/FasterXML/jackson-core</a>. Accessed Mar. 2016
</div>
<div class="footnote" id="_footnote_14">
<a href="#_footnoteref_14">14</a>. Ben-Kiki, et al (2009). YAML Ain’t Markup Language (YAML™) Version 1.2. Online. Available at: <a href="http://www.yaml.org/spec/1.2/spec.html" class="bare">http://www.yaml.org/spec/1.2/spec.html</a>. Accessed Jul. 2016
</div>
<div class="footnote" id="_footnote_15">
<a href="#_footnoteref_15">15</a>. Stieben, D. (2012). What Is A Processor Core? MakeUseOf Explains. Online. Available at: <a href="http://www.makeuseof.com/tag/processor-core-makeuseof-explains-2/" class="bare">http://www.makeuseof.com/tag/processor-core-makeuseof-explains-2/</a>. Accessed Jul. 2016
</div>
<div class="footnote" id="_footnote_16">
<a href="#_footnoteref_16">16</a>. Wikipedia. (2016). Middleware. Online. Available at <a href="https://en.wikipedia.org/wiki/Middleware" class="bare">https://en.wikipedia.org/wiki/Middleware</a>. Accessed Jul.2016
</div>
<div class="footnote" id="_footnote_17">
<a href="#_footnoteref_17">17</a>. Webopedia.com. (2016). What is failover? Webopedia Definition. Online. Available at: <a href="http://www.webopedia.com/TERM/F/failover.html" class="bare">http://www.webopedia.com/TERM/F/failover.html</a>. Accessed Jul. 2016
</div>
<div class="footnote" id="_footnote_18">
<a href="#_footnoteref_18">18</a>. Webopedia.com. (2016). What is Latency? Webopedia Definition. Online. Available at: <a href="http://www.webopedia.com/TERM/L/latency.html" class="bare">http://www.webopedia.com/TERM/L/latency.html</a>. Accessed Jul. 2016
</div>
<div class="footnote" id="_footnote_19">
<a href="#_footnoteref_19">19</a>. Webopedia.com. (2016). What is Library? Webopedia Definition. Onilne. Available at: <a href="http://www.webopedia.com/TERM/L/library.html" class="bare">http://www.webopedia.com/TERM/L/library.html</a>. Accessed Jul. 2016
</div>
</div>]]></description><link>https://vanilla-java.github.io/2016/03/22/Micro-services-for-performance.html</link><guid isPermaLink="true">https://vanilla-java.github.io/2016/03/22/Micro-services-for-performance.html</guid><category><![CDATA[Microservices]]></category><category><![CDATA[design]]></category><dc:creator><![CDATA[Peter Lawrey]]></dc:creator><pubDate>Tue, 22 Mar 2016 00:00:00 GMT</pubDate></item></channel></rss>